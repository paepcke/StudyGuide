1
00:00:01,910 --> 00:00:05,548
In this unit, you learned about some of the
major applications in the internet today and

2
00:00:05,549 --> 00:00:09,650
how NATs, or network address translators can
complicate them.

3
00:00:09,650 --> 00:00:14,360
nowadays, a new NAT you buy tends to be reasonably
well behaved, but there's still many old NATs

4
00:00:14,360 --> 00:00:18,990
out there that have some troublesome or difficult
behavior.

5
00:00:18,990 --> 00:00:24,099
Let's start with NATs. In this unit, you learned
what a network address translator is and how

6
00:00:24,099 --> 00:00:28,960
it works. It's a router that allows many device
to share one IP address.

7
00:00:28,960 --> 00:00:33,820
It does this by rewriting packets as they
pass through it. A NAT device has an external

8
00:00:33,820 --> 00:00:38,980
interface to communicate with the outside
world, which has a publicly routable IP address.

9
00:00:38,980 --> 00:00:44,620
It manages a set or subnet of private internal
addresses. For example, all the IP addresses

10
00:00:44,620 --> 00:00:48,889
starting with 10. or all of the IP addresses
starting with 192.168.

11
00:00:48,890 --> 00:00:55,890
The NAT device assigns one of the private
addresses to itself. For example, 192.168.0.1

12
00:00:57,600 --> 00:01:01,719
and then assigns the remaining addresses to
the devices in the internal network.

13
00:01:01,719 --> 00:01:07,250
If you have a home wifi router, it probably
acts as a NAT device as well, using the 192.168.

14
00:01:07,250 --> 00:01:10,680
subnet of IPv4 addresses.

15
00:01:10,680 --> 00:01:14,910
You learned that when a NAT routes a packet,
from the internal network to the external

16
00:01:14,910 --> 00:01:19,790
internet, it modifies the packet header so
that it looks like it is coming from the NAT's

17
00:01:19,790 --> 00:01:22,200
single external IP.

18
00:01:22,200 --> 00:01:26,430
Its essentially multiplexing all the packets
from different internal addresses on to one

19
00:01:26,430 --> 00:01:28,280
external IP Address.

20
00:01:28,280 --> 00:01:33,430
For this to work, it needs a way to distinguish
the reply packets flowing in the other direction,

21
00:01:33,430 --> 00:01:37,210
so that it can correctly forward them to the
correct internal device.

22
00:01:37,210 --> 00:01:41,330
NAT devices do this by modifying the transport
port numbers to encode which internal device

23
00:01:41,330 --> 00:01:47,020
the transport flow comes from. This means
a NAT is aware of the transport layers and

24
00:01:47,020 --> 00:01:48,780
modifies them, too.

25
00:01:48,780 --> 00:01:52,900
When a packet arrives from the external internet,
it checks if the transport port number matches

26
00:01:52,900 --> 00:01:54,490
a mapping to an internal device.

27
00:01:54,490 --> 00:01:57,970
If it does, it modifies it and forwards it
to the internal network.

28
00:01:57,970 --> 00:02:03,560
Because a NAT typically only creates a map
from internal ip addresses to external port

29
00:02:03,560 --> 00:02:07,920
numbers, when packets are flowing towards
the outside world, it doesn't know what to

30
00:02:07,920 --> 00:02:11,780
do with packets showing up from the outside
world that are trying to reach an internal

31
00:02:11,780 --> 00:02:12,330
device.

32
00:02:12,330 --> 00:02:17,670
To some, this is a security benefit. By default,
you can only create outgoing connections,

33
00:02:17,670 --> 00:02:21,050
protecting your internal devices from attack
from the outside world.

34
00:02:21,050 --> 00:02:26,180
But to others, this is a nuisance because
you can't initiate a new TCP connection from

35
00:02:26,180 --> 00:02:28,450
the outside world to the inside.

36
00:02:28,450 --> 00:02:33,680
The NAT will drop the TCP Syn packet. There
are a lot of different NAT designs and there

37
00:02:33,680 --> 00:02:38,000
are many ways to map the ip addresses to out
going port numbers and we saw some of them

38
00:02:38,000 --> 00:02:40,670
in this unit, each with its own complications.

39
00:02:40,670 --> 00:02:45,740
The general consensus is that simple, less
restrictive mappings are better, because they

40
00:02:45,740 --> 00:02:49,230
give the appearance of end-to-end connectivity.

41
00:02:49,230 --> 00:02:53,400
You also learned about some of the techniques
that people use to work around NATs like NAT

42
00:02:53,400 --> 00:02:58,300
hole punching and simultaneous open, but the
main take away from this unit is NATs make

43
00:02:58,300 --> 00:03:03,230
it hard to deploy applications in the internet
that require a TCP connection to be setup

44
00:03:03,230 --> 00:03:08,930
from the outside world to devices behind NATs
and it's hard to deploy new transport protocols,

45
00:03:08,930 --> 00:03:11,960
because the NAT devices don't know how to
process them.

46
00:03:11,960 --> 00:03:17,590
In general, when people have created new transport
protocols, they either masquerade as TCP or

47
00:03:17,590 --> 00:03:23,000
run on top of UDP.

48
00:03:23,000 --> 00:03:28,190
You learned about the Domain Name System,
an application that uses UDP. On one hand,

49
00:03:28,190 --> 00:03:32,680
its critical infrastructure, without which,
the internet would be much less useful.

50
00:03:32,680 --> 00:03:36,140
On the other, it's just an application.

51
00:03:36,140 --> 00:03:40,230
You learned that the basic idea of the Domain
Name System is that you can map heirarchical

52
00:03:40,230 --> 00:03:47,170
names, such as www.stanford.edu, to different
kinds of information called records.

53
00:03:47,170 --> 00:03:53,770
For example, you can ask what the IPv4 address
of www.stanford.edu is. You can ask what the

54
00:03:53,770 --> 00:03:56,280
name server for stanford.edu is.

55
00:03:56,280 --> 00:04:01,440
You can ask what the mailserver for cs.stanford.edu
is.

56
00:04:01,440 --> 00:04:06,760
You learned that the Domain Name System works
through a heirarchy of servers. For Example,

57
00:04:06,760 --> 00:04:12,590
to find the address for www.stanford.edu,
you first ask a root server, where you can

58
00:04:12,590 --> 00:04:19,590
find out about the .edu, then ask .edu where
you can find stanford and finally ask stanford

59
00:04:19,850 --> 00:04:24,180
for the address of www.stanford.edu.

60
00:04:24,180 --> 00:04:28,910
Each of these records, the Address records
and the nameserver records, on each step can

61
00:04:28,910 --> 00:04:33,190
be cached, often for a long while to reduce
load.

62
00:04:33,190 --> 00:04:38,200
To make this caching work even better, often
many clients share a resolver, a computer

63
00:04:38,200 --> 00:04:44,200
who queries the Domain Name Service for you.
That way, it can cache all of those results

64
00:04:44,200 --> 00:04:49,880
and share them among clients. That way, all
of stanford only needs to do a single lookup

65
00:04:49,880 --> 00:04:54,850
for Google, as long as the record lasts, rather
than having every laptop contacting Google's

66
00:04:54,850 --> 00:04:58,470
DNS servers.

67
00:04:58,470 --> 00:05:05,470
HTTP is the hypertext transfer protocol. It
runs on TCP. We've been using the same version

68
00:05:06,150 --> 00:05:12,889
of HTTP, that's version 1.1, for almost 20
years now. Basically, it's unchanged. You

69
00:05:12,889 --> 00:05:15,500
learned that HTTP is a request / response
protocol.

70
00:05:15,500 --> 00:05:20,100
Both the request and the response are in ASCII
text, which is useful because it's very easy

71
00:05:20,100 --> 00:05:22,570
to read.

72
00:05:22,570 --> 00:05:29,570
One of the big improvements in HTTP1.1 was
something called keep alive. In HTTP1.0, each

73
00:05:30,460 --> 00:05:36,080
request was made on a separate TCP connection.
So to download a page with 40 resources on

74
00:05:36,080 --> 00:05:43,080
it, your client had to open 40 TCP connections.
HTTP 1.1 allows a client to request many resources

75
00:05:43,760 --> 00:05:45,440
all on the same connection.

76
00:05:45,440 --> 00:05:50,000
This means, less time is spend in the three-way
handshake, and the TCP connection has more

77
00:05:50,000 --> 00:05:53,430
time to grow its connection window.

78
00:05:53,430 --> 00:05:57,790
You learned ways to roughly calculate the
download time for downloading a complete page

79
00:05:57,790 --> 00:05:59,830
and all of its resources.

80
00:05:59,830 --> 00:06:04,120
Using this, you saw how connection setup time
could be a significant overhead for TCP connections

81
00:06:04,120 --> 00:06:05,970
that transfer only a little bit of data.

82
00:06:05,970 --> 00:06:12,970
Finally, you heard a little bit about SPDY,
the protocol that has become the basis of

83
00:06:13,690 --> 00:06:16,300
HTTP/2.0.

84
00:06:16,300 --> 00:06:23,300
The Third Application you learned about was
BitTorrent. Like HTTP, BitTorrent uses TCP,

85
00:06:23,300 --> 00:06:28,680
but unlike HTTP, which is a client server
application, BitTorrent is a large collection

86
00:06:28,680 --> 00:06:35,680
of collaborating clients called a swarm. Use
BitTorrent to share large, say 100MB files.

87
00:06:36,240 --> 00:06:41,300
BitTorrent breaks these files up into small
chunks called pieces.

88
00:06:41,300 --> 00:06:45,530
You learned that each BitTorrent client opens
connections to scores, sometimes as many as

89
00:06:45,530 --> 00:06:51,550
100 other clients. A client request data from
other clients using a rarest-first policy,

90
00:06:51,550 --> 00:06:57,699
So it tries avoiding a piece disappearing
from the swarm and also to remove bottlenecks.

91
00:06:57,699 --> 00:07:01,729
You also learned that while BitTorrent is
happy to request data from lots of peers,

92
00:07:01,729 --> 00:07:07,570
it is very careful about whom it sends data
to. BitTorrent tries to setup an incentive

93
00:07:07,570 --> 00:07:12,310
system where you want to contribute data and
let others transfer from you.

94
00:07:12,310 --> 00:07:18,220
So the way it works is a node will send data
to the P peers who are sending it the most

95
00:07:18,220 --> 00:07:23,900
data. That way, the best way to get data from
a peer is to send it data.

96
00:07:23,900 --> 00:07:27,790
To better figure out who those best peers
are, BitTorrent occaisionally starts sending

97
00:07:27,790 --> 00:07:32,610
to a new random peer in order to discover
new potential partners in exchange.

98
00:07:32,610 --> 00:07:39,290
This algorithm, is called the tit for tat
algorithm.

99
00:07:39,290 --> 00:07:42,880
So you have seen three major applications
on the Internet today. You've seen how the

100
00:07:42,880 --> 00:07:48,590
simple abstractions that UDP and TCP provide,
can be used in complex ways for very interesting

101
00:07:48,590 --> 00:07:49,660
applications.

102
00:07:49,660 --> 00:07:54,090
You also learned how Network Address Translators
can complicate applications by making it hard

103
00:07:54,090 --> 00:07:59,530
to discover peers or open connections as well
as a few techniques for working around them.

104
00:07:59,530 --> 00:08:03,169
You now should have a good understanding of
some of the techniques you can use and challenges

105
00:08:03,169 --> 00:08:07,639
you might run into when you go out and develop
the next generation of network applications.

