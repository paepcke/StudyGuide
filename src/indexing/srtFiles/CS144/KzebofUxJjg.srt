1
00:00:00,000 --> 00:00:04,753
In the next two videos, I'm going to be
telling you about clocks and clock

2
00:00:04,753 --> 00:00:07,900
recovery.
Whenever we send data over a link for

3
00:00:07,900 --> 00:00:12,881
example, an Ethernet link, we normally
assume a data rate like ten megabits per

4
00:00:12,881 --> 00:00:16,854
second or a gigabit per second.
When we send it ten megabits per second,

5
00:00:16,854 --> 00:00:21,163
we're assuming that each bit lasts 100
nanoseconds, or 10,000,000 of them per

6
00:00:21,163 --> 00:00:23,458
second.
And at a gigabit per second, we're

7
00:00:23,458 --> 00:00:27,767
assuming each bit lasts a nanosecond.
So there must be some notion of a clock

8
00:00:27,767 --> 00:00:32,468
somewhere, the clock that was used by the
transmitter in order to send those bits in

9
00:00:32,468 --> 00:00:35,713
the first place.
And the receiver needs to know that clock

10
00:00:35,713 --> 00:00:38,680
as well, in order to be able to correctly
decode them.

11
00:00:38,680 --> 00:00:43,562
The problem is that there is no universal
reference for a clock which is precisely

12
00:00:43,562 --> 00:00:47,385
the same in two places.
So the clock that's used, or the frequency

13
00:00:47,385 --> 00:00:51,503
that's used by the transmitter is not
precisely known to the receiver.

14
00:00:51,503 --> 00:00:56,209
It has to figure it out and so in figure
out when one bit ends and an other bit

15
00:00:56,209 --> 00:00:58,444
begins.
So in this video, I am going to be

16
00:00:58,444 --> 00:01:03,150
describing what the general problem is,
How we encode clock information with the

17
00:01:03,150 --> 00:01:06,444
data to make the life, make life easier
for the receiver,

18
00:01:06,444 --> 00:01:11,385
And then how the receiver can extract the
clock and use it to transfer it into it's

19
00:01:11,385 --> 00:01:16,132
own clock domain,
Its owned frequency of clock, and then use

20
00:01:16,132 --> 00:01:19,840
it and manipulate it, as you would like
in, at the receiver.

21
00:01:19,840 --> 00:01:24,386
So the outline of what we're going to be
seeing is this, I'm going to be describing

22
00:01:24,386 --> 00:01:28,933
how data is transmitted using a clock, and
the receiver needs to, er, know when to

23
00:01:28,933 --> 00:01:32,343
sample the incoming bits, in order to
recover them correctly.

24
00:01:32,343 --> 00:01:37,061
We'll see this in the context of what's
called asychronise communication for short

25
00:01:37,061 --> 00:01:41,607
messages, but then the more common case is
sychronise communication, that's whats

26
00:01:41,607 --> 00:01:46,268
used in, ethernet, and, and, and systems
like that where the data, is encoded along

27
00:01:46,268 --> 00:01:50,871
with the clock, making it easier for the
receiver to recover the clock, at the far

28
00:01:50,871 --> 00:01:53,600
end, and then move it into it's own clock
domain.

29
00:01:54,480 --> 00:01:59,667
When we transmit data,
We always send it using a clock.

30
00:01:59,667 --> 00:02:03,083
That's because we want it to have a
particular frequency.

31
00:02:03,083 --> 00:02:06,139
So for example here, I show a server A,
sending data.

32
00:02:06,139 --> 00:02:11,173
And, I've sort of zoomed in on the final
stage of processing just before the data

33
00:02:11,173 --> 00:02:15,727
goes out on the, out on the wire.
This is a flip flop which is, just nearly

34
00:02:15,727 --> 00:02:20,521
timing the data according to the, to the,
to the outgoing clock which is here ten

35
00:02:20,521 --> 00:02:23,697
megahertz.
In other words, there's a, 100 nanosecond

36
00:02:23,697 --> 00:02:27,412
period to this clock.
So this is a clock that we might use for

37
00:02:27,412 --> 00:02:32,193
sending a ten megabits per second.
When we want to receive that data at the

38
00:02:32,193 --> 00:02:35,607
other end.
You know, ideally, there would be a second

39
00:02:35,607 --> 00:02:41,228
wire coming from here that could be used
in order to clock the data in at the other

40
00:02:41,228 --> 00:02:44,106
end.
So that this would come in as the data.

41
00:02:44,106 --> 00:02:47,520
And then would go to the receiver at the
other end.

42
00:02:47,709 --> 00:02:52,824
This would take to two wires. We'd have to
send both the data and the clock.

43
00:02:52,824 --> 00:02:55,855
And in most cases, we can't afford to do
that.

44
00:02:55,855 --> 00:03:00,022
It would be much more efficient if we
could just send one of them.

45
00:03:00,022 --> 00:03:04,442
So on here, we would have the, if we were
to do this, we'd have the data.

46
00:03:04,442 --> 00:03:07,705
That could be the sequence zero one zero
one, one and then zero, zero.

47
00:03:07,705 --> 00:03:11,739
And then down here, would just be the
clock that we would use in order to be

48
00:03:11,739 --> 00:03:14,789
able to encode it at one end and decode it
at the other.

49
00:03:14,789 --> 00:03:19,147
We're going to be looking at a number of
different examples where the clock is not

50
00:03:19,147 --> 00:03:21,925
sent.
There's no specific or separate clock line

51
00:03:22,088 --> 00:03:24,594
and in fact this is how it's done in
practice.

52
00:03:24,594 --> 00:03:28,897
There's no separate clock that's sent.
Everything has to be determined from the

53
00:03:28,897 --> 00:03:34,441
signal itself.
To illustrate the problem, let me start

54
00:03:34,441 --> 00:03:37,842
with an example.
Imagine that we have a clock here.

55
00:03:37,842 --> 00:03:43,506
And this is the clock that is being used
by the transmitter in order clock the data

56
00:03:43,506 --> 00:03:47,282
out onto the wire.
Okay? So I put guidelines here just to

57
00:03:47,282 --> 00:03:50,384
help me draw that.
So this is the, the TX clock.

58
00:03:50,384 --> 00:03:53,921
I'll write that as TXCLK.
The data that's being sent.

59
00:03:53,921 --> 00:04:00,711
Let's say in this example. We're going to,
every time there's a downward transition

60
00:04:00,711 --> 00:04:05,787
in the clock, we're going to change the
data that's, that's put on the wire.

61
00:04:05,787 --> 00:04:09,422
So, for example, let's say that it started
out idle.

62
00:04:09,422 --> 00:04:13,432
And then it went to A1.
And that it went for a one here.

63
00:04:13,432 --> 00:04:17,689
And then it continued as a one in the data
down to here.

64
00:04:17,689 --> 00:04:21,870
And then we wanted to send a zero.
And then a, and so on.

65
00:04:21,870 --> 00:04:28,843
So the data that is being sent is zero
one, one zero one and then we're sending

66
00:04:28,843 --> 00:04:31,650
another one again here.
And so on.

67
00:04:31,650 --> 00:04:34,366
At the receiver, let's look at the
receiver's clock.

68
00:04:34,366 --> 00:04:38,574
And let's assume that the receiver's clock
is, nominally running at the same

69
00:04:38,574 --> 00:04:41,610
frequency.
Although we didn't get it exactly right

70
00:04:41,610 --> 00:04:45,765
because we were generating it locally, and
we were using a different, oscillator, for

71
00:04:45,765 --> 00:04:49,760
example, in order to generate that.
And, they were designed to be the same,

72
00:04:49,760 --> 00:04:52,210
nominally.
But they're very slightly different.

73
00:04:52,210 --> 00:04:55,939
And so, in this case, we're going to
assume that, that receiver clock is

74
00:04:55,939 --> 00:04:59,667
operating just a tad slower.
So it may have its transition at the same

75
00:04:59,667 --> 00:05:02,917
place at the beginning.
But because it's running a little bit

76
00:05:02,917 --> 00:05:05,699
slower,
Its first transition is a little bit later

77
00:05:05,699 --> 00:05:10,295
than this one and so its next transition
is a little bit later again, then again a

78
00:05:10,295 --> 00:05:14,890
little later and then its going to get a
little later and eventually just because

79
00:05:14,890 --> 00:05:19,485
its running a little bit slower, its going
to start falling behind and you can see

80
00:05:19,485 --> 00:05:24,361
that by the time we get all the way over
to here its upward transition is about the

81
00:05:24,361 --> 00:05:28,564
same time as the transmit clocks downward
transition, so it's about out by half a

82
00:05:28,564 --> 00:05:31,142
phase.
I've exaggerated it here in practice it

83
00:05:31,142 --> 00:05:35,737
would be much closer than this but I'm
just exaggerating to show you what's going

84
00:05:35,737 --> 00:05:36,410
on.
Okay, now.

85
00:05:36,410 --> 00:05:40,708
The data on the, on, when we were sending
it was being changed on the downward

86
00:05:40,708 --> 00:05:45,229
transition, and it, it kind of makes sense
to, for the receiver to try and identify

87
00:05:45,229 --> 00:05:49,471
the middle of the bit and sample the bit
in the middle, so, here and here, and

88
00:05:49,471 --> 00:05:53,881
here, if it can, because this if furthest
away from the edges, and so the data is

89
00:05:53,881 --> 00:05:58,626
going to be at it's most stable, so we're
looking to, looking to sample that in the

90
00:05:58,626 --> 00:06:01,138
middle.
So, for example, if we started sampling

91
00:06:01,138 --> 00:06:05,406
here, right at the beginning, from the
receiver, we would pre-accurately detect

92
00:06:05,406 --> 00:06:07,876
that as a zero.
So we would see that as a zero and

93
00:06:07,876 --> 00:06:10,939
everything would be good.
Now, we're going to sample it again here.

94
00:06:10,939 --> 00:06:14,594
We're a little later than we would have
been, than, than, than we would have

95
00:06:14,594 --> 00:06:17,311
liked, but we're still going to reliably
see that as a one.

96
00:06:17,311 --> 00:06:20,489
So, things are good.
And it really, we're going to sample it

97
00:06:20,489 --> 00:06:24,967
here, we're getting a bit close to that
edge, let's give ourselves the benefit of

98
00:06:24,967 --> 00:06:27,933
the doubt and say that we just caught that
one there.

99
00:06:27,933 --> 00:06:32,523
By the time we come over here and sample
again, what she's sampling right here and

100
00:06:32,523 --> 00:06:36,946
we're going miss this zero completely, so
when we sample here, we're going to see a

101
00:06:36,946 --> 00:06:39,577
one again.
So this zero that happened in, in the

102
00:06:39,577 --> 00:06:44,055
middle, this zero that was sent here, we
didn't sample, there were no up arrows at

103
00:06:44,055 --> 00:06:48,309
that bit period of the receiver, so we
didn't see it, we missed it completely.

104
00:06:48,309 --> 00:06:53,125
So clearly our ability to detect this is
going to depend on a couple of things.

105
00:06:53,125 --> 00:06:58,357
One is, how different are these clocks?
I really exaggerated the difference here

106
00:06:58,357 --> 00:07:03,584
and practiced the, the very, very similar
within a fraction within a percent.

107
00:07:03,584 --> 00:07:09,298
In fact, we usually use we usually use
units of parts per million, ppm, parts per

108
00:07:09,298 --> 00:07:12,713
million.
So for example, if we say that a clock is

109
00:07:12,713 --> 00:07:18,567
within what, plus or minus a 100 parts per
million, we mean it's within plus or minus

110
00:07:18,776 --> 00:07:24,594
that would be 0.01%.
That's because that's ten to the minus ten

111
00:07:24,596 --> 00:07:27,409
to the minus four.
So that would be a typical value.

112
00:07:27,409 --> 00:07:31,932
In fact, you couldn't get clocks that are,
that are as much as, as close as 50 parts

113
00:07:31,932 --> 00:07:34,360
per million.
Still, if we go over enough bits.

114
00:07:34,360 --> 00:07:38,738
So if it's 100 parts per million, we would
have to go over about 10,000 bit times,

115
00:07:38,738 --> 00:07:42,685
and we would actually have shifted by a
complete bit in either direction.

116
00:07:42,685 --> 00:07:46,793
And we don't know whether the receiver is
running faster or slower than the

117
00:07:46,793 --> 00:07:49,605
transmitter.
So we don't know whether we're going to

118
00:07:49,605 --> 00:07:53,551
accidentally double sample a bit, or we're
going to miss a bit completely.

119
00:07:53,551 --> 00:07:57,173
Generally speaking, though, they hold at a
fairly constant frequency.

120
00:07:57,173 --> 00:08:01,228
In other words, if one is faster, it's
likely to stay faster for, for quite a

121
00:08:01,228 --> 00:08:03,390
while.
They're not drifting very quickly,

122
00:08:03,390 --> 00:08:06,580
relative to each another.
They may just have a fixed offset.

123
00:08:06,580 --> 00:08:11,644
So here we see the problem where we
incorrectly decoded the data because we

124
00:08:11,644 --> 00:08:15,923
didn't have the clock.
Now, in some cases, we, we can still

125
00:08:15,923 --> 00:08:21,474
communicate, without, having to
explicitly, understand what the clock is,

126
00:08:21,474 --> 00:08:27,537
or, or, or be able to recover it.
In, in what's called asynchronous

127
00:08:27,537 --> 00:08:31,097
communication.
Although we don't use this for networks

128
00:08:31,097 --> 00:08:36,213
like, ethernet, it's used by things like,
infrared, re-, remote control, for a tv or

129
00:08:36,212 --> 00:08:41,569
for short communication, it's also used on
the, serial bus that's, used to connect

130
00:08:41,570 --> 00:08:44,460
computers, although that's not very much
anymore.

131
00:08:44,460 --> 00:08:49,456
So for very short communications, so long
as we know nominally, that the transmitter

132
00:08:49,456 --> 00:08:53,669
and receiver clock are about the same, we
can, we can make this work.

133
00:08:53,669 --> 00:08:58,605
So for example, imagine that we had a very
short packet here consisting of just seven

134
00:08:58,605 --> 00:09:04,855
bits, at the beggining, It has this big
bit of a beginning which looks like it has

135
00:09:04,855 --> 00:09:09,383
a bigger amplitude just to tell us that
this is the start of the packet, and

136
00:09:09,383 --> 00:09:13,911
there's one at the end to tell us that
it's the end of the packet, so the start

137
00:09:13,911 --> 00:09:17,523
bit and the stop bit.
Then we have the sequence 0110100, this is

138
00:09:17,523 --> 00:09:19,987
just the data inside the, inside the
packet.

139
00:09:19,987 --> 00:09:24,814
So the, the transmit clock, that's what
was used in order to encode this in the

140
00:09:24,814 --> 00:09:28,404
first place.
That's, that's correctly, detecting the,

141
00:09:28,404 --> 00:09:30,960
the middle of each of these bits.
011,

142
00:09:30,960 --> 00:09:35,463
Right in the center of all those bits,
'because that's what the, was used to

143
00:09:35,463 --> 00:09:39,541
transmit it in the first place.
And here might be the receive clock.

144
00:09:39,541 --> 00:09:44,044
The receive clock here is running a little
slower than the transmit clock.

145
00:09:44,044 --> 00:09:48,912
You can see that the, there's a slight gap
between here and here, and that gap is

146
00:09:48,912 --> 00:09:53,598
going to grow as we go on, closer to the
end of the bit. So long as, before we get

147
00:09:53,598 --> 00:09:58,683
to the end of the packet,
The receiver it can still correctly decode

148
00:09:58,683 --> 00:10:02,661
the bits.
And here it's can, can correctly decode

149
00:10:02,661 --> 00:10:05,230
that zero.
Then we're okay.

150
00:10:05,230 --> 00:10:09,397
So how did all of this work?
Well, after the start bit, the receiver

151
00:10:09,397 --> 00:10:12,870
said I'm going to start sampling half a
bit time later.

152
00:10:12,870 --> 00:10:17,984
So it sees that start bit, it sees that
falling edge here, and then it times until

153
00:10:17,984 --> 00:10:21,710
it samples, and then it correctly samples
the, the zero here.

154
00:10:21,710 --> 00:10:27,143
And then it waits for another clock period
and then it samples again and it correctly

155
00:10:27,143 --> 00:10:30,240
sample that one and so on, all the way to
the end.

156
00:10:30,240 --> 00:10:35,110
You can see that if the packet was longer
because of this drift of the recieved

157
00:10:35,110 --> 00:10:39,798
packet its getting later and later and
later, eventually we'll miss a bit.

158
00:10:39,798 --> 00:10:44,912
So, so long as we can make sure that the
packet is not too long, in other words we

159
00:10:44,912 --> 00:10:49,356
control P and if we know that the
tolerants between these two clocks, the

160
00:10:49,356 --> 00:10:54,349
difference between them then knowing those
two numbers we can make sure we can

161
00:10:54,349 --> 00:10:58,550
reliably decode the packet.
So for short packets this week works fine.

162
00:10:58,550 --> 00:11:03,418
In practice though, this doesn't work very
well for long packets because we like P to

163
00:11:03,418 --> 00:11:08,115
be thousands or hundreds of thousands of
bits, and we would have to make the

164
00:11:08,115 --> 00:11:12,811
tolerance of the receive clock so tight
that this would not be practical to do in

165
00:11:12,811 --> 00:11:14,440
a, in a real system.
So,

166
00:11:14,440 --> 00:11:18,766
Asynchronous communications sometimes used
for links with short packets.

167
00:11:18,766 --> 00:11:23,392
Infrared remote control, or serial links,
or, for example, those connecting to a,

168
00:11:23,392 --> 00:11:25,494
directly to a printer, locally.
Okay.

169
00:11:25,494 --> 00:11:30,241
So we've seen how data is transmitted
using a clock and we've seen that the

170
00:11:30,241 --> 00:11:35,167
receiver needs to know when to sample the
arriving data, and we've also seen an

171
00:11:35,167 --> 00:11:39,854
example of asynchronous communications.
Now we're going to go on to the real meat,

172
00:11:39,854 --> 00:11:44,240
which is the synchronous communications,
which is what we use in practice.

173
00:11:44,240 --> 00:11:48,709
Let me start with sort of a block diagram
of how the system might look.

174
00:11:48,709 --> 00:11:53,239
Don't be intimidated, I'm going to go
through each of these pieces in turn, and

175
00:11:53,239 --> 00:11:56,320
you're going to understand what each of
them is doing.

176
00:11:56,320 --> 00:12:01,514
So the problem is different hosts and here
we have server A that's sending to the

177
00:12:01,514 --> 00:12:04,853
router on the right.
Different hosts are using locally

178
00:12:04,853 --> 00:12:09,244
generated clocks of not only the same
frequency, but slightly different.

179
00:12:09,244 --> 00:12:14,253
So we have 10MHz plus or minus hundred
parts per million again this example here

180
00:12:14,253 --> 00:12:19,509
is a ten mega bit per second link because
I am sending data using this 10MHz clock

181
00:12:19,509 --> 00:12:24,580
and I am sending to the router, sending to
my first router, of course this could be

182
00:12:24,580 --> 00:12:29,094
another host or an ethernet switch,
anything which is the other end of an

183
00:12:29,094 --> 00:12:34,280
ethernet link.
When the data arrives,

184
00:12:34,280 --> 00:12:39,360
Because I'm only sending one over one
piece of wire,

185
00:12:39,360 --> 00:12:43,816
What the receiver is going to do is going
to try and figure out the clock that was

186
00:12:43,816 --> 00:12:47,057
used by the sender.
And this is in what's called a clock

187
00:12:47,057 --> 00:12:49,487
recovery unit, or a clock recovery
circuit.

188
00:12:49,487 --> 00:12:54,291
These are special circuits that, that take
the incoming signal and determine the

189
00:12:54,291 --> 00:12:58,573
clock that was used by the sender.
It does this by examining the frequency

190
00:12:58,573 --> 00:13:03,029
and the phrase of the arriving bits.
So those bits that were, that were on the

191
00:13:03,029 --> 00:13:07,428
wire, so it's going to look at the bits,
and say, huh, if I can actually detect

192
00:13:07,428 --> 00:13:12,000
when there's a transition, then I can
actually determine what the frequency was.

193
00:13:12,000 --> 00:13:16,000
And actually where one bit starts, and the
another bit, and that bit ends.

194
00:13:16,000 --> 00:13:20,906
So it's able to recover this.
So while the bit mapping can be anything,

195
00:13:20,906 --> 00:13:25,483
if there's a strong enough component in
the spectrum from the sender's clock of

196
00:13:25,483 --> 00:13:30,003
what its frequency was, then its receiver
will find it and use it to sample the

197
00:13:30,003 --> 00:13:32,925
bits.
There are many types of circuit that are

198
00:13:32,925 --> 00:13:37,897
used for a clock recovery unit but the
most common one is called a phase locked

199
00:13:37,897 --> 00:13:39,814
loop or a PLL.
Phase locked loop.

200
00:13:39,814 --> 00:13:44,306
And the lay locked loops called DLL's,
they're kind of a digital equivalent.

201
00:13:44,486 --> 00:13:47,361
Or they could actually be a very precise
filter.

202
00:13:47,361 --> 00:13:52,632
There's something called a saw filter or
surface acoustic wave which is also used

203
00:13:52,632 --> 00:13:56,343
as a clock recovery device.
In the next line, I'm going to tell you

204
00:13:56,343 --> 00:14:00,704
about how we make life easier for this
clock recovery unit by encoding the,

205
00:14:00,704 --> 00:14:04,600
encoding the, the clock and the data
together before we transmit it.

206
00:14:04,900 --> 00:14:07,973
Let's go in and see what the other piece
are here.

207
00:14:07,973 --> 00:14:13,015
So there's a flip flop that's used at the
receiver in order to clock that data in.

208
00:14:13,015 --> 00:14:15,966
And you can see that let me just redraw
that.

209
00:14:15,966 --> 00:14:20,146
Here's the flip flop and it's being
clocked using the senders clock.

210
00:14:20,146 --> 00:14:24,757
So in other words, we've, we've figured
out what this clock was in the clock

211
00:14:24,757 --> 00:14:27,770
recovery unit and we're using that to
clock here.

212
00:14:29,530 --> 00:14:34,178
Even though we've used the sender's clock
in order to recover the data, eventually

213
00:14:34,178 --> 00:14:39,054
we need to process it using a clock that's
been generated locally using an oscillator

214
00:14:39,054 --> 00:14:43,419
that is, running inside the router.
So, it needs to be able to clock this in.

215
00:14:43,419 --> 00:14:48,124
And this is why we say that the clock
that's once we've moved into the, into the

216
00:14:48,124 --> 00:14:52,150
clock domain of the, the receiver, we call
this the receive clock domain.

217
00:14:52,150 --> 00:14:56,361
So up until this point here, this
transition, this dotted line, we're using

218
00:14:56,361 --> 00:15:00,919
the transmitters clock domain because
we've recovered the senders clock, and so

219
00:15:00,919 --> 00:15:05,073
we're operating using its clock.
But the clock of the transmitter is not

220
00:15:05,073 --> 00:15:09,688
much use to us as the receiver, if we're
wanting to process the data, in order to

221
00:15:09,688 --> 00:15:14,188
do, calculate check sums, and re-transmit
the data according to our local, local

222
00:15:14,188 --> 00:15:17,015
clock.
So we have to somehow move from one domain

223
00:15:17,015 --> 00:15:21,688
to the other, and we have to do this very
carefully, so that we don't lose bits in

224
00:15:21,688 --> 00:15:24,908
between.
So, once the data has been sampled by the

225
00:15:24,908 --> 00:15:30,223
flip flop, it's placed into a small fifo.
And that's the fifo shown here.

226
00:15:30,223 --> 00:15:34,327
And, this fifo is very critical to how the
whole system works.

227
00:15:34,327 --> 00:15:39,575
The fifo is another special circuit to
help us take the bit from the sender's

228
00:15:39,575 --> 00:15:42,670
clock domain into the reciever's clock
domain.

229
00:15:42,670 --> 00:15:45,289
Why?
Because we need to get the bit into the

230
00:15:45,289 --> 00:15:49,931
clock domain of the receiver so it can
process the packet using its own clock.

231
00:15:49,931 --> 00:15:54,634
To do this, the bit is written into the
fifo, so it's written into the fifo here

232
00:15:54,634 --> 00:15:59,741
using the transmitter's clock.
And then that it's read out of the fifo

233
00:15:59,741 --> 00:16:05,401
using the receivers clock.
So the fifo is different from the ones we

234
00:16:05,401 --> 00:16:08,487
used before.
Where we assumed that the clock is the

235
00:16:08,487 --> 00:16:12,117
same on both sides.
This fifo was very carefully designed to

236
00:16:12,117 --> 00:16:16,595
let us do this using two clocks.
Once the bit emerges on the other side, it

237
00:16:16,595 --> 00:16:21,496
is no in the clock domain of the receiver
and we can safely process it using its

238
00:16:21,496 --> 00:16:26,865
clock.
This fifo is called an elasticity buffer

239
00:16:26,865 --> 00:16:32,283
and we call it an elasticity buffer
because it's taking up the slack between

240
00:16:32,283 --> 00:16:35,872
the two clocks.
And we're going to see in a minute how

241
00:16:35,872 --> 00:16:41,924
this is going to go up and down according
to the relative speeds of the two clocks.

242
00:16:41,924 --> 00:16:47,343
And in a few minutes I'll explain how we
design the whole system so we never

243
00:16:47,343 --> 00:16:50,510
overflow or underflow this elasticity
buffer.

244
00:16:50,510 --> 00:16:55,136
But first, I'm going to describe how we
encode the signal in the first place, so

245
00:16:55,136 --> 00:16:58,788
that the clock can be recovered by this
clock recovery unit.

246
00:16:58,788 --> 00:17:03,050
If the clock was sent separately, as I
described in an example earlier,

247
00:17:03,050 --> 00:17:07,920
As it would be on a circuit board of a
computer, or between different parts of a

248
00:17:07,920 --> 00:17:10,720
circuit on a chip,
Life would be pretty simple.

249
00:17:10,720 --> 00:17:15,894
We could simply use the clock to feed into
the flip flop, and capture the bits in the

250
00:17:15,894 --> 00:17:20,518
same clock domain everywhere.
But if the clock is, is not sent, sent

251
00:17:20,518 --> 00:17:24,939
separately, the data stream must have
sufficient transitions in it.

252
00:17:24,939 --> 00:17:29,627
We must make sure there are enough
transitions in it, in order for the

253
00:17:29,627 --> 00:17:32,910
receiver to determine the clock at the
other end.

254
00:17:32,910 --> 00:17:37,066
Now, you might be looking at this and
saying, what if I was to send a stream of

255
00:17:37,066 --> 00:17:39,570
all 1's, so that this actually was like
this.

256
00:17:39,570 --> 00:17:43,940
It would have no transitions in it at all
and so the receiver wouldn't be able to

257
00:17:43,940 --> 00:17:47,670
determine what the clock is.
So we need to prevent that from happening.

258
00:17:47,670 --> 00:17:51,134
Likewise, if it was to send all 0's, there
would be no transitions.

259
00:17:51,134 --> 00:17:55,450
Or if it was to send a signal that looked
like this that had the changed half as

260
00:17:55,450 --> 00:17:59,287
often as the clock, then, we might be
confused and believe that the clock

261
00:17:59,287 --> 00:18:03,550
frequency was half, when in fact it was.
So, we need to think about this carefully.

262
00:18:03,550 --> 00:18:08,688
And the method that is typically used is
to encode the data, and when we send it in

263
00:18:08,688 --> 00:18:11,870
order to make sure there are sufficient
transitions.

264
00:18:11,870 --> 00:18:16,008
So I'm going to start by describing what
the original ten megabit per second

265
00:18:16,008 --> 00:18:18,804
ethernet used.
It used something called Manchester

266
00:18:18,804 --> 00:18:22,719
coding, or Manchester encoding.
Manchester coding is a very, very simple

267
00:18:22,719 --> 00:18:25,739
mechanism.
It's, used occasionally these days, not as

268
00:18:25,739 --> 00:18:30,045
much as it was, and we'll see why that is
in a minute, but, it's perhaps the

269
00:18:30,045 --> 00:18:33,848
simplest one to understand.
Here at the top is the data that we want

270
00:18:33,848 --> 00:18:36,756
to send.
So this is the 0111, sorry, sorry,

271
00:18:36,756 --> 00:18:40,894
01101011, which is the data that we want
to send.

272
00:18:40,894 --> 00:18:45,144
And the way that that's going to be
encoded before placing it onto the wire is

273
00:18:45,144 --> 00:18:49,068
as follows.
We're going to look at the middle we're

274
00:18:49,068 --> 00:18:52,685
going to look at the bit.
And make sure that there is a transition

275
00:18:52,685 --> 00:18:56,187
during every bit time.
So this is, this signal here is the one

276
00:18:56,187 --> 00:18:59,919
that's going to go onto the wire.
Whenever we see a zero, we're going to

277
00:18:59,919 --> 00:19:03,708
have a downward transition.
Whenever we see a one, we're going to have

278
00:19:03,708 --> 00:19:07,211
an upward transition.
So here we can see, one is encoded by an

279
00:19:07,211 --> 00:19:11,230
upward transition, zero is decoded, is
encoded by a downward transition.

280
00:19:11,230 --> 00:19:15,769
Okay, so this would be what would go on
the line and then to make it a continuous

281
00:19:15,769 --> 00:19:18,740
signal we do this.
Now notice, I had to insert another

282
00:19:18,740 --> 00:19:22,944
transition here because I got one followed
by one, so therefore I need to have a

283
00:19:22,944 --> 00:19:26,194
downward transition.
And here I've got a one followed by a

284
00:19:26,194 --> 00:19:28,997
zero, so I need to have a downward
transition here.

285
00:19:28,997 --> 00:19:32,080
So this would be the sequence I would send
on the wire.

286
00:19:32,080 --> 00:19:36,419
Then,
The clock that I would use at the far end

287
00:19:36,419 --> 00:19:39,317
can be recovered by just looking for the
transitions.

288
00:19:39,317 --> 00:19:43,254
See, I've got a transition here.
I've got a transition here, so whenever I

289
00:19:43,254 --> 00:19:47,628
see a transition, I can be sure that, I
can use that to have a nice strong and

290
00:19:47,628 --> 00:19:51,510
easy way to recover the clock.
And just make sure that I'm not confused,

291
00:19:51,510 --> 00:19:55,775
I mustn't see this transition as,
representing another, another upbeat on

292
00:19:55,775 --> 00:19:59,548
the clock at the other end.
But I can do that by just having a finely

293
00:19:59,548 --> 00:20:04,029
tuned filter at the other end, because I
know that nominally, I'm looking for a ten

294
00:20:04,032 --> 00:20:07,904
megabit per second clock.
And so, I'm, I'm not going to confuse it

295
00:20:07,904 --> 00:20:10,110
with one that's running at twice the
speed.

296
00:20:10,110 --> 00:20:15,097
So, by having a nice, healthy set of
transitions in the middle of the signal, I

297
00:20:15,097 --> 00:20:18,853
can be sure that it's easy to recover it
at the other end.

298
00:20:18,853 --> 00:20:23,905
So the advantages of this Manchester
encoding is it guarantees one transition

299
00:20:23,905 --> 00:20:27,661
per bit period.
It has a second benefit, which is well, a

300
00:20:27,661 --> 00:20:31,548
little bit more subtle.
It, it does something which is called

301
00:20:31,548 --> 00:20:35,952
ensuring the DC balance.
If I send those as voltage levels on the

302
00:20:35,952 --> 00:20:38,801
wire,
If that was zero and this was plus and

303
00:20:38,801 --> 00:20:42,169
this was minus.
Oops, and this was minus, I'm actually

304
00:20:42,169 --> 00:20:46,539
sending just as many,
Just as much, spending just as much of the

305
00:20:46,539 --> 00:20:50,837
time above that wire above that line as I
am below it.

306
00:20:50,837 --> 00:20:55,280
And so I'm making sure that I get DC
balance in the long term.

307
00:20:55,280 --> 00:20:59,601
The benefit of this is that in order to be
able to correctly differentiate a one and

308
00:20:59,601 --> 00:21:04,483
a zero at the other end, I just need to
set my threshold to be in the middle or

309
00:21:04,483 --> 00:21:07,682
the average on the wire.
So that makes it a, for a very real,

310
00:21:07,682 --> 00:21:10,488
viable and robust recovery of bits in the
far end.

311
00:21:10,488 --> 00:21:14,922
There's a clear disadvantage of men-,
registering coding and that I'm inserting

312
00:21:14,922 --> 00:21:19,299
more transitions than I actually need.
I'm doubling the bandwidth in the worst

313
00:21:19,299 --> 00:21:23,013
case.
I'm doubling the bandwidth because by

314
00:21:23,013 --> 00:21:28,570
having more transitions, if I was to send
a sequence of all 1s, I would actually

315
00:21:28,570 --> 00:21:34,057
have a sequence of these, where I've got
twice as many transitions as I really

316
00:21:34,057 --> 00:21:38,381
need.
So, by doubling the bandwidth I would have

317
00:21:38,381 --> 00:21:42,105
a dominate frequency component with a
signal that is being increased.

318
00:21:42,105 --> 00:21:46,423
If we're running over a cable and trying
to make it as fast as we can, this is a

319
00:21:46,423 --> 00:21:48,744
problem.
We've now wasted some the precious

320
00:21:48,744 --> 00:21:52,911
bandwidth on the, on the wire.
Let's look at what this what this spectrum

321
00:21:52,911 --> 00:21:55,908
looks like.
This is the frequency spectrum for ten

322
00:21:55,908 --> 00:21:59,244
megabits per second.
So, in other words, if we take it into a

323
00:21:59,244 --> 00:22:03,768
spectrum analyzer, something that will
tell us the signal strength as a function

324
00:22:03,768 --> 00:22:08,688
of this,, of the frequency and if we were
able to take the original bit sequence, we

325
00:22:08,688 --> 00:22:11,120
would see something like this.
We would see,

326
00:22:11,120 --> 00:22:16,085
At different frequencies,
So this frequency here is the 5MHz, which

327
00:22:16,085 --> 00:22:21,678
is the average when I've got a sequence
of, of 0's and 1's but a random sequence

328
00:22:21,678 --> 00:22:26,958
of 0's and 1's, I would see some frequency
component around here but it's not strong

329
00:22:26,958 --> 00:22:31,923
enough to find it and lock onto it and
know that, that was the frequency of the

330
00:22:31,923 --> 00:22:34,814
clock.
However, if I look at it with Manchester

331
00:22:34,814 --> 00:22:39,151
encoding, I see what suddenly emerges is
this strong component at 10MHz..

332
00:22:39,780 --> 00:22:44,393
Everything has been moved up in the
frequency, in the frequency band because

333
00:22:44,393 --> 00:22:47,367
I've encoded it and then set in more
transitions.

334
00:22:47,367 --> 00:22:52,284
So the spectrum itself is starting at five
megahertz roughly now, only a bit down

335
00:22:52,284 --> 00:22:57,080
here for long sequences of 0s and 1s.
But I'm seeing that most of that spectrum

336
00:22:57,080 --> 00:23:00,913
is now above 5MHz..
Makes it very easy for clock recovery,

337
00:23:00,913 --> 00:23:05,349
because I just need to find this dominant
component, and then use it as my clock at

338
00:23:05,349 --> 00:23:08,212
the far end.
So Manchester encoding it makes, makes it

339
00:23:08,212 --> 00:23:13,136
nice easy, nice and easy.
As a second example, if I wanted to use

340
00:23:13,136 --> 00:23:18,170
something that was a little bit more
efficient than Manchester encoding, I can

341
00:23:18,170 --> 00:23:23,397
take successive numbers, successive blocks
of bits and include them in the way to

342
00:23:23,397 --> 00:23:28,753
make sure I have got some transitions but
may be not twice as many as I had before.

343
00:23:28,753 --> 00:23:33,400
This is, in this example I will describe
something called 4b, 5b encoding.

344
00:23:33,400 --> 00:23:36,110
There are variance of this.
Ap 10b, 15b,

345
00:23:36,110 --> 00:23:39,796
16b. 4b means its 4b of original data.
That I wanted to send.

346
00:23:39,796 --> 00:23:43,334
And I'm going to encode that into a five
bit code.

347
00:23:43,334 --> 00:23:50,552
So just as an example here, I took 0000
and I encoded it as 11110. So I'm

348
00:23:50,552 --> 00:23:53,453
guaranteed if I send this on the wire of
11110,.

349
00:23:54,940 --> 00:24:00,393
So this would be the 11110 and guarantee
that there is a downward transition during

350
00:24:00,393 --> 00:24:03,465
that code.
This code has two transitions in it or

351
00:24:03,465 --> 00:24:08,229
actually three from zero to one, one to
zero, and then from zero to one again.

352
00:24:08,229 --> 00:24:10,845
This one has from one to zero, zero to
one.

353
00:24:10,861 --> 00:24:15,751
So I can be sure always that there are
some transitions within that five bits.

354
00:24:15,751 --> 00:24:20,577
If I know that at the far end then, that
there will be enough transitions then

355
00:24:20,577 --> 00:24:25,602
whatever the data originally included,
I can make sure that I've got enough

356
00:24:25,602 --> 00:24:28,859
transitions to be able to recover the
clock at the far end.

357
00:24:28,859 --> 00:24:31,343
Why can I be sure that there are
transitions?

358
00:24:31,343 --> 00:24:34,096
Well.
There are two to the four or sixteen data

359
00:24:34,096 --> 00:24:38,812
codes, and there are two to the five or 32
codes that I'm going to put on to the

360
00:24:38,812 --> 00:24:41,347
wire.
I'm just going to select those ones that

361
00:24:41,347 --> 00:24:45,238
have enough transitions, so there are
twice as many to choose from.

362
00:24:45,238 --> 00:24:50,013
I can always be sure to find a code that
has a transition in it, so I can be sure

363
00:24:50,013 --> 00:24:54,612
that the outgoing data that I put under
the wire has enough transitions in it.

364
00:24:54,612 --> 00:24:59,328
Comes in an overhead, it's, it's more
bound with efficient than Manchester

365
00:24:59,328 --> 00:25:03,986
encoding but it has a 25% overhead.
But that's certainly much better than

366
00:25:03,986 --> 00:25:07,829
having a double overhead.
I'm actually left with some extra codes.

367
00:25:07,829 --> 00:25:12,153
And some people will, will use these for,
for some inbound control signals.

368
00:25:12,153 --> 00:25:17,069
So, I actually end up with a sixteen codes
that I, that I didn't actually need,

369
00:25:17,069 --> 00:25:19,848
because I've taken from four bits to five
bits.

370
00:25:19,853 --> 00:25:24,592
Fewer transitions definitely make the
clock recovery harder, than for Manchester

371
00:25:24,592 --> 00:25:29,330
encoding, but this has been around long
enough that people have developed clever

372
00:25:29,330 --> 00:25:33,713
circuits, in order to be able to do this.
So, 4b, 5b, and variant of this, this

373
00:25:33,713 --> 00:25:36,320
block coding is, is very commonly used
today.

374
00:25:37,200 --> 00:25:42,535
So in summary,
I have a system that looks like this.

375
00:25:42,535 --> 00:25:46,155
We've seen the, the clock that's being
used at the, here.

376
00:25:46,155 --> 00:25:50,696
I've now got encoded data.
So this would be the encoded data that I'm

377
00:25:50,696 --> 00:25:53,592
sending.
Could be 4B5B, or Manchester encoded.

378
00:25:53,592 --> 00:25:57,278
Goes out over the link.
The clock recovery unit is going to

379
00:25:57,278 --> 00:26:02,346
determine what the clock was that was used
at the sender, by examining the

380
00:26:02,346 --> 00:26:05,769
transitions.
We'll use that to clock the data in, and

381
00:26:05,769 --> 00:26:09,850
then it's going to put it into this
elasticity buffer right here.

382
00:26:09,850 --> 00:26:14,346
In the next video, I'm going to be
describing how this, how this elasticity

383
00:26:14,346 --> 00:26:17,260
buffer works and how we can size it
correctly.

384
00:26:17,260 --> 00:26:21,440
But for now, we've seen how we send data
and how we can recover it.

