1
00:00:00,919 --> 00:00:04,730
Nick: In this unit, you’ve seen how transport
and packet switching interact through congestion

2
00:00:04,730 --> 00:00:11,220
control. Flow control is about the end hosts.
It ensures the source host doesn't overwhelm

3
00:00:11,220 --> 00:00:16,480
the destination host by sending more than
it can receive. Congestion control, on the

4
00:00:16,480 --> 00:00:20,460
other hand, is about preventing the source
hosts from overwhelming the links and routers

5
00:00:20,460 --> 00:00:25,980
in between them. When a source host put too
many packets into the network or when lots

6
00:00:25,980 --> 00:00:29,600
of sources put packets into the network, they
can fill up the router queues until they overflow.

7
00:00:29,600 --> 00:00:36,600
In TCP, a congestion control algorithm running
on the sending host tells it how many packets

8
00:00:36,739 --> 00:00:42,319
it can have outstanding in the network so
as not to overfill the router queues. TCP

9
00:00:42,319 --> 00:00:47,319
will always lead to some packets being dropped,
because this is the feedback signal is uses

10
00:00:47,319 --> 00:00:52,679
to know when the router queues are full. But
when it's working well, TCP keeps the packet

11
00:00:52,679 --> 00:00:58,479
drop rate low, links nice and full, and allows
the flow to have a high throughput.

12
00:00:58,479 --> 00:01:05,479
Phil: First, Nick explained the principles
of network congestion. We learned what happens

13
00:01:05,600 --> 00:01:10,539
when a router starts receiving packets faster
than it can send them. If the congestion is

14
00:01:10,539 --> 00:01:15,880
short lived, then a router can absorb this
extra traffic into a queue and drain the queue.

15
00:01:15,880 --> 00:01:20,530
If the congestion is long lived, long lived
enough that the queue overflows, then the

16
00:01:20,530 --> 00:01:26,600
router has to drop some packets. Nick introduced
a very valuable way to think about this. Rather

17
00:01:26,600 --> 00:01:31,810
than come up with a scheme for dropping packets,
think about what you want the overall network

18
00:01:31,810 --> 00:01:37,109
behavior to be. We want the network to be
fair and explained what that means, introducing

19
00:01:37,109 --> 00:01:43,880
the concept of max-min fairness. Max-min fairness
says that the network is fair if you can’t

20
00:01:43,880 --> 00:01:48,710
increase the rate of a flow without decreasing
the rate of flow with a lower rate.

21
00:01:48,710 --> 00:01:55,399
There are a lot of ways to achieve this goal,
and networks today have many different mechanisms.

22
00:01:55,399 --> 00:02:01,090
But we focused on one in particular, how TCP
can control the number of outstanding packets

23
00:02:01,090 --> 00:02:06,700
in the network. We introduced the basic algorithm
TCP uses, called additive increase, multiplicative

24
00:02:06,700 --> 00:02:13,459
decrease, or AIMD. When running smoothly,
TCP increases the number of bytes it can have

25
00:02:13,459 --> 00:02:19,650
outstanding by one segment size per round
trip time. When TCP detects a packet is dropped,

26
00:02:19,650 --> 00:02:23,670
it halves the number of bytes it can have
outstanding.

27
00:02:23,670 --> 00:02:28,420
You learned what this behavior looks like
using a TCP sawtooth diagram. While each individual

28
00:02:28,420 --> 00:02:34,680
flow has a sawtooth, over link that many flows
share these all average out to a consistently

29
00:02:34,680 --> 00:02:40,890
high use of the link. Using the sawtooth,
we derived TCP’s throughput using simple

30
00:02:40,890 --> 00:02:47,680
AIMD. If you assume that a network drops packets
at a uniform rate p, then the throughput of

31
00:02:47,680 --> 00:02:54,680
a TCP flow is the square root of three halves
times the inverse of RTT times the square

32
00:02:55,700 --> 00:03:02,019
root of p. If you increase the round trip
time, throughput goes down. This equation

33
00:03:02,019 --> 00:03:06,230
makes a lot of simplifying assumptions, but
it turns out to be generally pretty accurate

34
00:03:06,230 --> 00:03:11,870
in many cases and so a very valuable tool
when thinking about how a network might behave.

35
00:03:11,870 --> 00:03:17,349
Nick: You've learned how TCP realizes these
principles in practice. Phil told you about

36
00:03:17,349 --> 00:03:23,099
how the Internet collapsed in the late 1980s
due to congestion, and the fixes made to TCP,

37
00:03:23,099 --> 00:03:28,610
which are still in use today. You learned
about three versions of TCP: TCP Tahoe, TCP

38
00:03:28,610 --> 00:03:34,939
Reno, and TCP New Reno.
The first important idea we covered is that

39
00:03:34,939 --> 00:03:41,420
a TCP endpoint maintains a congestion window.
A TCP flow can have N unacknowledged bytes

40
00:03:41,420 --> 00:03:45,459
outstanding in the network, where N is the
minimum of its flow control window and its

41
00:03:45,459 --> 00:03:49,900
congestion control window. You don’t put
more packets into the network than the other

42
00:03:49,900 --> 00:03:55,689
end can handle or more than the links and
routers can handle in between. You learned

43
00:03:55,689 --> 00:04:01,750
how TCP controls the size of this congestion
control window using two states: slow start

44
00:04:01,750 --> 00:04:06,739
and congestion avoidance. Slow start lets
TCP quickly find something close to the right

45
00:04:06,739 --> 00:04:13,739
congestion window size, while congestion avoidance
uses AIMD. TCP starts in slow start and transitions

46
00:04:15,469 --> 00:04:21,220
to congestion avoidance when it first detects
a loss. You learned how TCP estimates the

47
00:04:21,220 --> 00:04:25,320
round trip time of its connection. It needs
this estimate to figure out when an acknowledgment

48
00:04:25,320 --> 00:04:29,610
times out. By keeping track of both the average
as well as the variance of how long it takes

49
00:04:29,610 --> 00:04:34,890
to receive an ack for a segment, TCP can avoid
unnecessary retransmissions as well as not

50
00:04:34,890 --> 00:04:40,040
wait too long. You learned how TCP controls
when it puts packets in the network using

51
00:04:40,040 --> 00:04:44,260
a technique called “self clocking” You
first saw self-clocking when I showed you

52
00:04:44,260 --> 00:04:48,850
an animation of TCP’s behavior. Phil then
walked you through some examples of this.

53
00:04:48,850 --> 00:04:53,410
With self clocking, TCP only puts a new packet
into the network when it receives an acknowledgment

54
00:04:53,410 --> 00:04:57,690
or when there’s a timeout. This is really
helpful in preventing congestion, as it means

55
00:04:57,690 --> 00:05:02,460
TCP only puts packets into the network when
packets have left the network.

56
00:05:02,460 --> 00:05:09,460
Finally, we covered three optimizations added
in TCP Reno and TCP New Reno. Fast retransmit

57
00:05:11,280 --> 00:05:15,890
lets TCP keep on making progress when only
one packet has been dropped. Rather than wait

58
00:05:15,890 --> 00:05:21,130
for a timeout, TCP retransmits a segment when
it detects three duplicate acknowledgments

59
00:05:21,130 --> 00:05:26,130
for the previous segment. This is a sign that
TCP is continuing to receive segments but

60
00:05:26,130 --> 00:05:32,130
hasn’t received that particular one. Using
fast recovery, TCP Reno doesn’t drop back

61
00:05:32,130 --> 00:05:37,100
into slow start on three duplicate acks, it
just cuts the congestion window in half and

62
00:05:37,100 --> 00:05:43,500
stays in congestion avoidance. Finally, TCP
New Reno adds an additional optimization,

63
00:05:43,500 --> 00:05:48,500
window inflation, such that three duplicate
acks don’t cause TCP to lose an RTT worth

64
00:05:48,500 --> 00:05:52,700
of transmissions as it waits for the missing
segment to be acked.

65
00:05:52,700 --> 00:05:59,700
Phil: Now what’s really fascinating about
congestion was that it’s something we discovered

66
00:05:59,910 --> 00:06:04,030
as the Internet evolved. Nobody had really
thought something like this might happen,

67
00:06:04,030 --> 00:06:09,070
or how to control it. It was an emergent behavior
once the network became large and heavily

68
00:06:09,070 --> 00:06:14,670
used enough. Nowadays it’s a basic concept
in networking, seen as critical to building

69
00:06:14,670 --> 00:06:17,150
robust networks that have high performance.

70
00:06:17,150 --> 00:06:22,600
Nick: Modern versions of TCP are a bit more
advanced than what we’ve talked about in

71
00:06:22,600 --> 00:06:28,620
class, but mostly they’ve evolved to handle
much, much faster networks. The TCP versions

72
00:06:28,620 --> 00:06:33,810
shipped in operating systems have TCP Reno
or TCP New Reno in their algorithms, with

73
00:06:33,810 --> 00:06:38,280
new additional features and modes of operation
to handle very fast networks. Take a look

74
00:06:38,280 --> 00:06:42,250
at the Linux source code, you’ll see these
algorithms in there.

75
00:06:42,250 --> 00:06:47,940
Phil: But what’s also neat is that these
nitty-gritty algorithms have a sound conceptual

76
00:06:47,940 --> 00:06:52,590
basis and theory behind them. On one hand,
we can talk about RTT variance estimation,

77
00:06:52,590 --> 00:06:57,840
fast recovery, and self-clocking. On the other,
we’re also talking about AIMD flows that

78
00:06:57,840 --> 00:06:59,610
can converge to max-min fairness.

