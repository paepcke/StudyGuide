1
00:00:01,969 --> 00:00:05,149
Networks aren’t perfect, and neither are
the hosts that run on

2
00:00:05,149 --> 00:00:07,939
them. They can introduce errors, and for a
network to be able to

3
00:00:07,939 --> 00:00:11,580
run properly it needs to be able to detect
these errors. For

4
00:00:11,580 --> 00:00:14,340
example, let’s say that a router along our
path has a bad memory

5
00:00:14,340 --> 00:00:18,410
cell, such that sometimes flips a bit in a
packet. Imagine, for

6
00:00:18,410 --> 00:00:22,279
example, if the bit flipped is the most significant
bit of the amount

7
00:00:22,279 --> 00:00:25,839
to charge a credit card. We need to be able
to detect that error

8
00:00:25,839 --> 00:00:29,819
occurred so we don’t accept the corrupted
data as correct data.

9
00:00:29,819 --> 00:00:32,669
Networks today generally use three different
error detection

10
00:00:32,668 --> 00:00:36,600
algorithms: checksums, cyclic redundancy codes,
CRCs, and

11
00:00:36,600 --> 00:00:40,310
message authentication codes, MACs. Each of
them has very

12
00:00:40,310 --> 00:00:42,840
different characteristics. Understanding their
differences is

13
00:00:42,840 --> 00:00:46,220
important! I’ve actually been at meetings
in the IETF where a few

14
00:00:46,220 --> 00:00:48,940
people weren’t aware of the differences!
If you don’t know, you

15
00:00:48,940 --> 00:00:55,940
might make a bad protocol decision or analysis.

16
00:00:59,510 --> 00:01:06,510
At a high level, error detection looks like
this. We have a

17
00:01:19,430 --> 00:01:23,430
payload of data. We calculate some error detection
bits over

18
00:01:23,430 --> 00:01:27,220
that data and either append it or prepend
it to the payload.

19
00:01:27,220 --> 00:01:31,420
For example, Ethernet appends a cyclic redundancy
code,

20
00:01:31,420 --> 00:01:34,950
Transport Layer Security appends a message
authentication

21
00:01:34,950 --> 00:01:39,010
code, and IP prepends a checksum, which it
places in the IP

22
00:01:39,010 --> 00:01:42,590
header. TLS and Ethernet have a footer, protocol
information

23
00:01:42,590 --> 00:01:49,590
which follows the payload, which is where
they put the CRC

24
00:02:01,740 --> 00:02:08,740
and MAC.

25
00:02:18,770 --> 00:02:23,080
The first of the three commonly used error
detection algorithms is a checksum. You just

26
00:02:23,080 --> 00:02:27,550
add all of the data in the packet. It’s
what TCP and IP use. Checksums are nice because

27
00:02:27,550 --> 00:02:31,620
they are very fast and cheap to compute, even
in software. Back when the Internet started

28
00:02:31,620 --> 00:02:35,720
and everything was in software, this was valuable.
Their major drawback is that they have pretty

29
00:02:35,720 --> 00:02:39,770
weak error detection guarantees. While they
can catch a lot of random errors, it’s

30
00:02:39,770 --> 00:02:44,000
easy to fool a checksum with as few as 2 bit
errors, if the two bit errors cancel each

31
00:02:44,000 --> 00:02:48,470
other out. For example, if one bit error adds
32 and another bit error subtracts 32, then

32
00:02:48,470 --> 00:02:52,849
a checksum won’t catch the error. So a checksum
can catch a lot of errors, but it turns out

33
00:02:52,849 --> 00:02:56,599
to have very weak guarantees on what errors
it will catch.

34
00:02:56,599 --> 00:03:00,220
The second of the three commonly used error
detection algorithms is a cyclic redundancy

35
00:03:00,220 --> 00:03:06,660
code, or CRC. A CRC is much more computationally
expensive than a checksum, but also much more

36
00:03:06,660 --> 00:03:09,560
robust. It computes the
remainder of a polynomial -- I’ll show what

37
00:03:09,560 --> 00:03:12,940
this means and how it works in a few minutes.
With today’s processors, it’s easy to

38
00:03:12,940 --> 00:03:17,349
do, and it’s easy to do in hardware. It’s
what Ethernet and many link layers use. In

39
00:03:17,349 --> 00:03:20,260
some ways,
TCP and IP can get away with checksums because

40
00:03:20,260 --> 00:03:27,260
the link layers use CRCs. If you have a CRC
that’s c bits long, a CRC can detect any

41
00:03:27,440 --> 00:03:33,349
1 bit error, any 2 bit error, and single burst
of errors less than or equal to c bits long,

42
00:03:33,349 --> 00:03:37,560
and
any odd number of errors. So it can provide

43
00:03:37,560 --> 00:03:44,319
much stronger guarantees that a checksum.
The final algorithm is something called a

44
00:03:44,319 --> 00:03:48,720
message authentication code, or MAC. A message
authentication code combines the packet with

45
00:03:48,720 --> 00:03:53,349
some secret information to generate a value.
In theory, someone can only generate or

46
00:03:53,349 --> 00:03:57,230
check the MAC if they have the secret. So
if you receive a packet and its MAC is correct,

47
00:03:57,230 --> 00:04:00,610
then you’re pretty sure the computer that
computed the MAC has the secret. Unless I

48
00:04:00,610 --> 00:04:03,019
have the secret, it’s amazingly difficult
to generate

49
00:04:03,019 --> 00:04:08,810
the correct MAC for a packet. So a bad guy
can’t easily generate a new packet. In fact,

50
00:04:08,810 --> 00:04:13,970
if you have a strong MAC algorithm, then given
one packet and its MAC, I have zero information

51
00:04:13,970 --> 00:04:17,940
on what the MAC will look like if I flip a
single bit. Message authentication codes are

52
00:04:17,940 --> 00:04:22,740
therefore robust to malicious modifications.
Message authentication codes are used in Transport

53
00:04:22,740 --> 00:04:26,280
Layer Security, TLS, which is what you use
when you browse web pages securely

54
00:04:26,280 --> 00:04:30,690
-- https.
But they’re actually not great for catching

55
00:04:30,690 --> 00:04:36,960
errors. If I flip a single bit in a packet,
theres a 1 in 2 to the c chance that the changed

56
00:04:36,960 --> 00:04:41,130
packet will have the same MAC! I’ve seen
people make this mistake when talking about

57
00:04:41,130 --> 00:04:43,160
error
correction, thinking a MAC is just as good

58
00:04:43,160 --> 00:04:48,720
as a CRC. It’s not! If I have a 16-bit CRC,
I’m assured that I will detect a burst of

59
00:04:48,720 --> 00:04:53,710
errors that is 16 bits long or shorter. If
I have a 16-bit MAC, I’m only assured that

60
00:04:53,710 --> 00:04:57,600
I’ll detect bit
errors with very high probability, 99.998

61
00:04:57,600 --> 00:05:03,169
percent, or one in 65,536. That’s high,
but think about how many packets you’ve

62
00:05:03,169 --> 00:05:07,860
received just watching this video...
I’ll now go into each of these algorithms

63
00:05:07,860 --> 00:05:09,240
in greater detail.

64
00:05:09,240 --> 00:05:14,550
Let’s start with a checksum. IP, UDP, and
TCP use one’s complement checksums. This

65
00:05:14,550 --> 00:05:17,400
means they add up the
packet using one’s complement arithmetic,

66
00:05:17,400 --> 00:05:20,699
a version of binary arithmetic some older
computers used. Most

67
00:05:20,699 --> 00:05:25,250
today use two’s complement.
The algorithm is pretty simple. You start

68
00:05:25,250 --> 00:05:28,199
by setting the checksum field of the packet
to zero. Then you add

69
00:05:28,199 --> 00:05:32,590
every 16-bit word in the packet. Any time
you have to carry, because the sum is greater

70
00:05:32,590 --> 00:05:39,590
than 65,535, then you
carry the bit back in. So 60,000 plus 8,000

71
00:05:40,040 --> 00:05:47,040
is 68,000 - 65,535 + 1, or 2,466. Once you’ve
added up the

72
00:05:49,460 --> 00:05:53,850
complete packet, flip the bits in your sum
and make this the checksum of the packet.

73
00:05:53,850 --> 00:05:57,840
Then, if you add up the
complete packet, including the checksum value,

74
00:05:57,840 --> 00:06:04,009
you should get 0xffff. There’s one edge
case: if the computed

75
00:06:04,009 --> 00:06:09,460
checksum is 0xffff, you don’t make the checksum
field 0, you make it 0xffff. In IP, UDP, and

76
00:06:09,460 --> 00:06:12,710
TCP, a checksum
field of 0 means there’s no checksum.

77
00:06:12,710 --> 00:06:16,370
That’s it! You can write this in just a
few lines of C code. It’s fast, easy to

78
00:06:16,370 --> 00:06:21,919
compute, and easy to check. All you
need to do is add the bytes of a packet. Given

79
00:06:21,919 --> 00:06:27,509
that most early Internet implementations were
in software, this

80
00:06:27,509 --> 00:06:31,389
was really helpful.
The drawback is that it’s really not that

81
00:06:31,389 --> 00:06:34,990
robust. While it definitely detects lots of
random errors, the guarantees

82
00:06:34,990 --> 00:06:39,320
it can give on what errors it detects are
really weak. In practice, it can only promise

83
00:06:39,320 --> 00:06:42,669
to catch single bit errors.
But it works pretty well, and link layers

84
00:06:42,669 --> 00:06:45,840
do a lot of heavy lifting for us.

85
00:06:45,840 --> 00:06:49,990
Link layers do their heavy lifting with something
called a cyclic redundancy check, or CRC.

86
00:06:49,990 --> 00:06:53,889
The idea of a CRC
is that I want to take n bits of source data

87
00:06:53,889 --> 00:06:56,830
and somehow distill them down into c bits
of error detection

88
00:06:56,830 --> 00:07:00,789
data, where c is much much smaller than N.
For example, I might have a 1500 byte Ethernet

89
00:07:00,789 --> 00:07:07,080
frame with a 4
byte, 32 bit, CRC. USB and Bluetooth use 16-bit

90
00:07:07,080 --> 00:07:10,350
CRCs.
Of course we can’t detect all errors. Given

91
00:07:10,350 --> 00:07:14,009
some other random packet, the chances the
CRC matches is two

92
00:07:14,009 --> 00:07:19,280
to the minus C, or one in two to the c. For
example, if I use an 8 bit CRC, then out of

93
00:07:19,280 --> 00:07:24,470
the space of all
packets, one in two hundred and 256, or 0.4%,

94
00:07:24,470 --> 00:07:30,229
have the same CRC as any given packet.
But CRCs are stronger than checksums. They

95
00:07:30,229 --> 00:07:32,870
can detect there’s an error in any packet
with an odd number

96
00:07:32,870 --> 00:07:39,419
of errors, 2 bit errors, or any single burst
of errors less than or equal to c bits long.

97
00:07:39,419 --> 00:07:42,120
They can’t guarantee
detecting errors besides these, but do a good

98
00:07:42,120 --> 00:07:46,190
job at it. For example, a 16-bit CRC can’t
guarantee it will

99
00:07:46,190 --> 00:07:50,740
detect two bursts of 3 bit errors spaced far
apart in a packet, but it’s likely it will

100
00:07:50,740 --> 00:07:54,940
detect the error.
Link layers typically use CRCs. They’re

101
00:07:54,940 --> 00:07:57,780
pretty robust, and as many link layers are
vulnerable to bursts of

102
00:07:57,780 --> 00:08:04,780
errors, the burst detection capability of
CRCs is useful. It’s not hard to make compute

103
00:08:05,360 --> 00:08:08,139
them quickly in
hardware, and you can compute them incrementally,

104
00:08:08,139 --> 00:08:09,940
as you read or write the packet.

105
00:08:09,940 --> 00:08:15,539
How does a CRC work? It distills these n bits
into c bits using something called polynomial

106
00:08:15,539 --> 00:08:18,319
long division. You take the bits of a message
and

107
00:08:18,319 --> 00:08:23,449
use them to describe a polynomial M. Each
bit in a packet is the coefficient of one

108
00:08:23,449 --> 00:08:26,199
term of the polynomial. If the bit is zero,
the term is

109
00:08:26,199 --> 00:08:33,199
absent. If the bit is one, the term is present.
So, for example, a message of 10011101 is

110
00:08:35,188 --> 00:08:42,188
the polynomial x to the 7th plus x the fourth
plus x to the third plus x squared plus one,

111
00:08:42,839 --> 00:08:46,860
x to the
zero. This is because the 7th, 4th, 3rd, 2nd

112
00:08:46,860 --> 00:08:52,259
and 0th bits are set in the message.
When we calculate a CRC, we have something

113
00:08:52,259 --> 00:08:58,639
called a generator polynomial. This is defined
by the CRC algorithm. For example, the CRC-16

114
00:08:58,639 --> 00:09:04,709
algorithm used by USB has a generator polynomial
of x to the 16th plus x to the 15th plus x

115
00:09:04,709 --> 00:09:09,869
squared plus one. For frustrating historical
reasons, the generator polynomial is one term

116
00:09:09,869 --> 00:09:14,329
longer than its number of bits: the first
term is always one. So the CRC-16 generator

117
00:09:14,329 --> 00:09:21,329
polynomial is written as 0x8005 even though
it has an x to the 16th term.

118
00:09:21,399 --> 00:09:27,600
To compute a CRC, you take the message M,
pad it with zeroes equal to the CRC length

119
00:09:27,600 --> 00:09:31,720
and divide this padded value by G. The remainder
is

120
00:09:31,720 --> 00:09:36,959
the CRC, which you append to the message.
To check a CRC, you divide the message plus

121
00:09:36,959 --> 00:09:41,889
CRC by the generator polynomial G. If the
remainder is zero, then the CRC passes. I

122
00:09:41,889 --> 00:09:45,329
won’t go into the details of how this works
mathematically, but it turns out it can be

123
00:09:45,329 --> 00:09:48,480
implemented
very quickly and efficiently in hardware.

124
00:09:48,480 --> 00:09:52,480
The strength of your CRC algorithm depends
on what generator polynomial G you pick: there’s

125
00:09:52,480 --> 00:09:54,899
been
a lot of study of this and so many good options

126
00:09:54,899 --> 00:09:58,610
which have the error detection properties
I mentioned earlier. But you might not get

127
00:09:58,610 --> 00:10:01,110
the same
error detection strength if you pick your

128
00:10:01,110 --> 00:10:03,199
own generator polynomial.

129
00:10:03,199 --> 00:10:06,579
The third and final kind of error detection
algorithm you commonly see in networks is

130
00:10:06,579 --> 00:10:11,139
a message authentication code, or MAC. Like
CRCs, there’s a deep and rich mathematical

131
00:10:11,139 --> 00:10:15,420
background on how message authentication codes
work: there are good ones and bad ones. So

132
00:10:15,420 --> 00:10:18,299
you generally want to use an existing scheme
rather than invent your own.

133
00:10:18,299 --> 00:10:22,100
Thankfully standards usually specify what
MAC to use, and although there were some mistakes

134
00:10:22,100 --> 00:10:25,420
in the late 90s where standards picked poor
algorithms, nowadays security is

135
00:10:25,420 --> 00:10:30,610
important enough that everyone relies on a
small number of really well studied approaches.

136
00:10:30,610 --> 00:10:34,889
Message authentication codes use cryptography,
a branch of mathematics that deals with secrets.

137
00:10:34,889 --> 00:10:38,759
The idea behind most message authentication
codes is that the two parties share

138
00:10:38,759 --> 00:10:45,439
a secret s. This secret is just a set of randomly
generated bits (random so it’s hard to guess).

139
00:10:45,439 --> 00:10:50,059
To calculate a message authentication code
c, apply the MAC algorithm to the

140
00:10:50,059 --> 00:10:54,799
message M and the secret s. MAC algorithms
have the property that if you don’t have

141
00:10:54,799 --> 00:10:59,970
s, then it’s really hard to generate the
correct c for a message M. Furthermore, it’s

142
00:10:59,970 --> 00:11:03,059
very hard
to create a message M whose message authentication

143
00:11:03,059 --> 00:11:07,029
code is c. By “hard” I mean that in the
best case you’d just have to exhaustively

144
00:11:07,029 --> 00:11:12,069
try: having M and c gives you almost no
information on what s is. This means that

145
00:11:12,069 --> 00:11:17,749
if you receive a message M with the correct
message authentication code, this means the

146
00:11:17,749 --> 00:11:23,209
computer that generated the message probably
has the secret (or someone replayed a message

147
00:11:23,209 --> 00:11:29,299
generated by that computer).
Because the goal is to keep s a secret, cryptographically

148
00:11:29,299 --> 00:11:33,410
strong message authentication codes have an
interesting property. If you change a single

149
00:11:33,410 --> 00:11:38,540
bit in M, then this results in a
completely new c, where the probability any

150
00:11:38,540 --> 00:11:45,149
bit in c is zero or one is seemingly random.
If this weren’t the case, then someone could

151
00:11:45,149 --> 00:11:47,519
potentially take a message, flip a single
bit

152
00:11:47,519 --> 00:11:51,129
(e.g., change a dollar value) and it wouldn’t
be that difficult to generate the correct

153
00:11:51,129 --> 00:11:58,009
c. This means that message authentication
codes actually have no error detection guarantees.

154
00:11:58,009 --> 00:11:59,829
If
you flip a single bit, you could end up with

155
00:11:59,829 --> 00:12:04,559
the same MAC!
Message authentication codes are very useful,

156
00:12:04,559 --> 00:12:09,410
but they’re first and foremost a security
mechanism. Being able to get both error detection

157
00:12:09,410 --> 00:12:13,749
and security with one mechanism is
efficient and nice, but their security properties

158
00:12:13,749 --> 00:12:16,759
mean their error detection isn’t as good
as other approaches.

159
00:12:16,759 --> 00:12:17,009
Here’s a quiz. For each error detection
algorithm, mark which

160
00:12:16,759 --> 00:12:17,009
errors it can guarantee catching, if any.
The CRCs use a good

161
00:12:16,769 --> 00:12:17,699
generator polynomial and the MAC algorithm
is cryptographically

162
00:12:17,699 --> 00:12:18,569
strong.

163
00:12:18,569 --> 00:12:22,980
Let’s go over the answers.
Both checksums can detect a single bit error

164
00:12:22,980 --> 00:12:27,559
-- remember that this is one of the errors
a checksum guarantees detecting.

165
00:12:27,559 --> 00:12:33,859
Both CRCs can also detect a single bit error.
A MAC can’t guarantee that it will detect

166
00:12:33,859 --> 00:12:38,040
a single bit error. For security reasons,
could be that the new MAC is the same as the

167
00:12:38,040 --> 00:12:42,290
old one. So it can’t guarantee
detecting it. In fact, a MAC can’t guarantee

168
00:12:42,290 --> 00:12:46,679
detecting any errors! So we can mark No for
all of the columns for the message authentication

169
00:12:46,679 --> 00:12:51,299
code.
How about two bit errors? Checksums can’t

170
00:12:51,299 --> 00:12:57,129
guarantee detecting two bit errors. So N for
both of them. CRCs, though, can guarantee

171
00:12:57,129 --> 00:13:00,100
detecting bit error runs in
length less than or equal to the length of

172
00:13:00,100 --> 00:13:04,660
the CRC. Since 2 bits is shorter than both
8 bits and 16 bits, both CRCs can detect a

173
00:13:04,660 --> 00:13:10,799
run of 2 bit errors. Correspondingly,
an 8-bit CRC can’t guarantee detecting a

174
00:13:10,799 --> 00:13:17,799
run of 9 bit errors, but a 16-bit CRC can.
So N for the 8 bit CRC and Y for the 16-bit

175
00:13:19,600 --> 00:13:22,730
CRC.
How about two bit errors 100 bits apart? It

176
00:13:22,730 --> 00:13:27,439
turns out none of these algorithms can guarantee
detecting this error. So N for all of them.

177
00:13:27,439 --> 00:13:30,989
Looking at this matrix, you might think error
detection is a waste -- the algorithms promise

178
00:13:30,989 --> 00:13:35,970
very little! But guarantee is a very strong
statement. While a 16-bit

179
00:13:35,970 --> 00:13:41,519
checksum can’t guarantee that it will catch
a run of 9 bit errors, there’s a high probability

180
00:13:41,519 --> 00:13:44,889
it will. Similarly, a 16-bit CRC has a very
high probability of detecting two bit

181
00:13:44,889 --> 00:13:50,169
errors 100 bits apart. And in practice, high
probability is often good enough. If failures

182
00:13:50,169 --> 00:13:53,809
are rare, then you only sometimes have to
do something more expensive to

183
00:13:53,809 --> 00:13:57,669
recover. But it means in practice you tend
to have multiple layers of error detection:

184
00:13:57,669 --> 00:14:01,949
the link layer detects them with CRCs, IP
detects them checksums, TCP detects

185
00:14:01,949 --> 00:14:07,379
them with checksums, and then often the application
has its own error detection. So, all put together,

186
00:14:07,379 --> 00:14:10,499
the changes of errors creeping through is
very very low.

187
00:14:10,499 --> 00:14:13,459
So we’ve seen three error detection schemes:
checksums, CRCs, and message authentication

188
00:14:13,459 --> 00:14:13,799
codes.
Checksums are fast and cheap, but not very

189
00:14:13,799 --> 00:14:14,049
robust. They’re used in IP and TCP. Cyclic
redundancy codes are

190
00:14:13,929 --> 00:14:14,239
much stronger. Computing them in hardware
is easy today, and they can detect a wide

191
00:14:14,239 --> 00:14:14,489
range of errors. Link
layers, such as Ethernet, typically use CRCs.

192
00:14:14,239 --> 00:14:15,480
The third algorithm is a message authentication
code, or MAC.

193
00:14:15,480 --> 00:14:17,480
Message authentication codes are designed
for security, but you can also use them for

194
00:14:17,480 --> 00:14:17,730
error detection.
However, since they’re designed for security

195
00:14:17,480 --> 00:14:17,730
first, this means they’re really good against
malicious

196
00:14:17,480 --> 00:14:17,730
modifications, but not that greater for detecting
errors.

197
00:14:17,480 --> 00:14:21,499
Data error detection is a great example of
the end-to-end principle. It’s actually

198
00:14:21,499 --> 00:14:24,509
what originally motivated
the principle -- the only way a layer can

199
00:14:24,509 --> 00:14:28,049
be sure that it communicates data correctly
is to perform an endto-

200
00:14:28,049 --> 00:14:31,869
end check. Ethernet needs to be sure that
its frames don’t have errors so it can parse

201
00:14:31,869 --> 00:14:35,850
them correctly, so
it has a CRC. IP needs to be sure that its

202
00:14:35,850 --> 00:14:39,720
packets don’t have errors so it can parse
them correctly. IP can’t

203
00:14:39,720 --> 00:14:45,509
depend on Ethernet doing its checking for
it: the Ethernet card or driver might introduce

204
00:14:45,509 --> 00:14:50,359
an error after it
checks the packet. So it has to do its own

205
00:14:50,359 --> 00:14:54,309
end-to-end check at the network layer. TLS
using message

206
00:14:54,309 --> 00:14:58,410
authentication codes is another example. It’s
especially interesting because TLS has very

207
00:14:58,410 --> 00:15:01,600
different error
detection requirements than IP or Ethernet:

208
00:15:01,600 --> 00:15:05,549
it wants security. So it has to provide its
own, end-to-end error

209
00:15:05,549 --> 00:15:11,619
detection scheme, as that’s the only way
it can be sure its requirements are met.

