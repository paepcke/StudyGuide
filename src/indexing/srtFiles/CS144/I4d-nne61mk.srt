1
00:00:00,000 --> 00:00:04,070
In the first video on packet switching, I
told you about what packet switching is

2
00:00:04,070 --> 00:00:09,030
and why it was used for the internet.
Packet switching is gonna feature very

3
00:00:09,030 --> 00:00:13,089
prominently throughout this course, so
we're gonna spend quite a bit of time on

4
00:00:13,090 --> 00:00:16,057
it.
And many of the properties of the Internet

5
00:00:16,056 --> 00:00:19,060
follow directly from the choice of packet
switching.

6
00:00:19,060 --> 00:00:24,037
So in this video I'm gonna give you some
useful definitions for propagation delay

7
00:00:24,037 --> 00:00:29,008
and packetization delay, and we're gonna
use those definitions to come up with an

8
00:00:29,008 --> 00:00:32,086
expression for the end-to-end delay of a
packet across a network.

9
00:00:32,086 --> 00:00:35,092
I'm also gonna tell you about queueing
delay.

10
00:00:35,092 --> 00:00:39,052
And how it makes the end to end delay
unpredictable.

11
00:00:39,052 --> 00:00:42,057
So, let's start with some useful
definitions.

12
00:00:42,057 --> 00:00:44,968
We'll start with the definition of propagation
delay.

13
00:00:44,968 --> 00:00:50,602
So, the propagation delay is the time that
it takes a single bit of information to

14
00:00:50,602 --> 00:00:56,096
travel over a link at propagation speed c.
So, look at the picture here and you see

15
00:00:56,096 --> 00:01:02,073
we have the, the computer on the left and
we are going to consider the time that it

16
00:01:02,073 --> 00:01:08,001
takes for a bit to propagate from the one on
the left to the one on the right.

17
00:01:08,001 --> 00:01:12,026
That time, the propagation delay or t sub
l is simply l over c.

18
00:01:14,023 --> 00:01:19,013
So the propagation delay is simply
determined by how long the link is,

19
00:01:19,013 --> 00:01:20,026
L in our case.

20
00:01:20,026 --> 00:01:22,057
And the speed that a bit travels.
C.

21
00:01:22,057 --> 00:01:28,060
We use the variable C in most of the links
we're interested in because C, the speed

22
00:01:28,060 --> 00:01:32,005
of propagation, is very close to the speed
of light.

23
00:01:32,005 --> 00:01:37,026
For example, in, in a twisted pair of
electrical cables, a bit propagates at

24
00:01:37,026 --> 00:01:42,020
about 70 percent of the speed of light,
and then in an optical fiber, the speed of

25
00:01:42,020 --> 00:01:47,005
propagation is a tiny bit slower.
In most of our examples, we'll assume that

26
00:01:47,005 --> 00:01:52,015
the bit propagates at two times ten to the
eight meters per second, which is, which

27
00:01:52,015 --> 00:01:53,095
is close enough.
There you go.

28
00:01:53,095 --> 00:01:58,024
There's the bit going along the link.
Let's have a look at that again.

29
00:01:58,024 --> 00:02:03,034
So it's the speed at which, or the time
which it takes to propagate over the link.

30
00:02:03,034 --> 00:02:06,082
So, for example.
If we were considering how long it would

31
00:02:06,082 --> 00:02:11,093
take a bit to travel a 1,000 kilometres or
a 1,000,000 metres in an optical fiber

32
00:02:11,093 --> 00:02:16,072
where the propogation speed was two times
ten to the eight metres per second.

33
00:02:16,072 --> 00:02:21,075
Well, t sub l is 1,000 times ten to the
three divided by two times ten to the

34
00:02:21,075 --> 00:02:26,062
eight or five milliseconds.
In a little bit, we're gonna look at some

35
00:02:26,062 --> 00:02:31,072
examples and you're gonna do some examples
in the multiple choice exercises embedded

36
00:02:31,072 --> 00:02:35,002
in the video.
Notice that the propagation delay doesn't

37
00:02:35,002 --> 00:02:39,065
depend on the data rate of the link.
Doesn't matter if the link is running at

38
00:02:39,065 --> 00:02:42,089
one kilobits per second or, or ten
gigabits per second.

39
00:02:42,089 --> 00:02:47,075
The propagation delay is just a function
of the speed of propagation of each bit

40
00:02:47,075 --> 00:02:54,036
and the length of the cable.
Another useful definition is the

41
00:02:54,036 --> 00:02:58,057
packetization delay.
This is the time from when the first bit of a

42
00:02:58,057 --> 00:03:03,012
packet is put onto the link until the last
bit is put onto the link.

43
00:03:03,012 --> 00:03:08,034
Let's take a look at an example here.
So see that packet there going on to the

44
00:03:08,034 --> 00:03:11,041
link.
The time that it takes to put all of the

45
00:03:11,041 --> 00:03:16,096
bits onto the link is gonna be a function
of the number of bits we're putting onto

46
00:03:16,096 --> 00:03:22,051
the link, and the distance between them all.
The number of bits per second that we can

47
00:03:22,051 --> 00:03:26,066
put onto the link.
So essentially the data rate of a link is

48
00:03:26,066 --> 00:03:30,009
determined by how close together we can
pack the bits.

49
00:03:30,009 --> 00:03:35,016
If for example, a link runs at one gigabit
per second, we can put onto, we can put

50
00:03:35,016 --> 00:03:40,030
one bit onto the link every nanosecond.
We'll see in a later video about physical

51
00:03:40,030 --> 00:03:43,053
links what actually limits the data rate
of a link.

52
00:03:44,019 --> 00:03:49,024
So the packetization delay is determined
by how fast we can put bits on the link,

53
00:03:49,024 --> 00:03:52,067
or the data rate R.
If a link runs at one kilobytes per

54
00:03:52,067 --> 00:03:56,041
second, we can put 1000 new bits onto the
link every second.

55
00:03:56,041 --> 00:04:01,033
If it runs at ten gigabits per second,
then we can put 10 billion bits onto

56
00:04:01,033 --> 00:04:06,002
the link every second.
Then look at a couple of examples.

57
00:04:06,002 --> 00:04:10,020
If we had a 64 byte packet, that's 512
bits.

58
00:04:10,020 --> 00:04:17,012
It would take 5.12 microseconds to be
transmitted on to a 100 megabits-per-second link.

59
00:04:17,012 --> 00:04:19,085
Why is that?

60
00:04:19,084 --> 00:04:25,307
Well, t sub p = p over r.
So p, in our case, is 64 times eight, 512, divided by

61
00:04:25,307 --> 00:04:29,012
r.
And r would be 100 times ten to the six.

62
00:04:29,018 --> 00:04:33,010
Another example.
A kilobit packet.

63
00:04:33,010 --> 00:04:38,077
Takes 1.024 seconds to be transmitted onto a one kilobit per second link

64
00:04:38,077 --> 00:04:41,053
So where did this 1.024 come from?

65
00:04:41,053 --> 00:04:47,028
Well, this is useful, useful example here.
Because the one kilobit per second.

66
00:04:47,049 --> 00:04:50,075
Sorry.
The one kilobit packet that we see here.

67
00:04:50,075 --> 00:04:56,028
One kilobit when we're measuring a number
of bits in a packet or in memory.

68
00:04:56,028 --> 00:05:00,047
One kilobit, as you know, is 1024, or two
to the power of ten.

69
00:05:00,047 --> 00:05:05,478
So that's why we have 1.024 seconds in
order to transmit it or do a one kilobit

70
00:05:05,478 --> 00:05:09,043
per second link.
So in this case it's a little bit

71
00:05:09,043 --> 00:05:12,094
confusing.
One kilobit per second means 1,000 bits

72
00:05:12,094 --> 00:05:17,007
per second, whereas one kilobit in the
packet is 1,024 bits.

73
00:05:17,007 --> 00:05:22,067
This is standard throughout networking and
we'll see this happen over and over

74
00:05:22,067 --> 00:05:27,069
again.
So notice that the, packetization delay.

75
00:05:28,022 --> 00:05:33,002
Is only a function of the length of the
packet.

76
00:05:33,002 --> 00:05:41,118
That's p here and the rate at which we can
put bits onto the link, or r bits per

77
00:05:41,118 --> 00:05:45,013
second.
Makes no difference how long the link is

78
00:05:45,013 --> 00:05:49,006
or how fast bits propagate
along it.

79
00:05:52,048 --> 00:05:57,058
So next we're going to see how we can use
our two different types of delay to

80
00:05:57,058 --> 00:06:02,075
determine the overall end-to-end delay.
That's the time it takes a packet to go

81
00:06:02,075 --> 00:06:06,016
across a network from the source to the
destination.

82
00:06:07,093 --> 00:06:14,089
So the end to end delay is the time from
when we send the first bit, on the first

83
00:06:14,089 --> 00:06:17,039
link.
That would be over here.

84
00:06:17,039 --> 00:06:23,874
Until the last bit, of the packet arrives
at the destination, B.

85
00:06:23,874 --> 00:06:30,199
So, we can calculate the end to end delay
by adding up the propagation and

86
00:06:30,199 --> 00:06:33,749
packetization delays on every link along
the path.

87
00:06:33,749 --> 00:06:38,961
That is, we can look at those, those
numbers we calculated before, that how

88
00:06:38,961 --> 00:06:44,625
long it takes the packet from the first
bit until, first bit is sent until the

89
00:06:44,625 --> 00:06:49,469
last bit arrives on this link here.
And then we can add it to the time on

90
00:06:49,469 --> 00:06:55,105
here, on here, and on here.
So, in our case that's gonna depend on the

91
00:06:55,105 --> 00:07:00,096
length of the first link and the rate at
which it runs.

92
00:07:00,096 --> 00:07:06,079
And then we can use our expressions to calculate the end to end delay.

93
00:07:06,079 --> 00:07:10,634
And we're going to come up with an
expression that looks like this.

94
00:07:10,634 --> 00:07:14,075
The end to end delay, t, equals the sum of,
the, first of all,

95
00:07:15,014 --> 00:07:18,279
the delay here, which is the packetization
delay.

96
00:07:18,279 --> 00:07:21,598
The time that it takes to put the packet
onto link.

97
00:07:21,598 --> 00:07:26,302
And then the time that it takes for one
bit to propagate along that link.

98
00:07:26,302 --> 00:07:30,682
So we're going to sum up all of those to
get the end to end delay.

99
00:07:30,682 --> 00:07:35,948
Let's look at this in a little bit, a
little bit more example, because I think

100
00:07:35,948 --> 00:07:40,866
it will become a bit clearer.
So in our example here, the packet is

101
00:07:40,866 --> 00:07:47,459
gonna traverse four lengths.
So we're gonna repeat the process on every

102
00:07:47,459 --> 00:07:51,528
link along the path.
And it's gonna look something like this.

103
00:07:51,528 --> 00:07:56,270
Here we're taking a closer by stretching
out the links and the switches.

104
00:07:56,270 --> 00:08:01,292
And remove the rest of the network, just
to make it a little bit clearer.

105
00:08:01,292 --> 00:08:05,989
This here is a, a timeline.
And this timeline, with time increasing

106
00:08:05,989 --> 00:08:10,333
from the left to the right, is gonna show
how bits propagate.

107
00:08:10,333 --> 00:08:14,835
And how the whole, whole packet propagates
from A over to B.

108
00:08:14,835 --> 00:08:22,363
So the first bit is gonna take L1 over
C, that's the length of that first link,

109
00:08:22,363 --> 00:08:28,923
divided by the propagation speed.
It's gonna take that number of seconds to

110
00:08:28,923 --> 00:08:34,543
propagate from A to S1.
So here we can see the bit starting from

111
00:08:34,543 --> 00:08:41,498
here and then propagating along the link.
L1 over C is the time, and this is it

112
00:08:41,498 --> 00:08:52,037
propagating the distance from A to S1.
After we sent the first bit, it's gonna

113
00:08:52,037 --> 00:09:00,502
take P over R1 seconds until we can put
the last bit of the packet onto the link.

114
00:09:00,502 --> 00:09:06,512
So after P over R1, we've put the last bit
onto the link.

115
00:09:06,512 --> 00:09:15,367
And then at the time, L1<i>C + P / R1.
That last bit will arrive at switch S1.</i>

116
00:09:15,367 --> 00:09:19,582
Okay.
So, at this point, by the time we get to

117
00:09:19,582 --> 00:09:24,688
this point here, the entire packet has
arrived at S1.

118
00:09:24,688 --> 00:09:31,331
So, Internet routers are what we call
store and forward devices.

119
00:09:31,331 --> 00:09:38,065
What that means is that switch S1 is gonna
wait until the whole packet arrives, until

120
00:09:38,065 --> 00:09:42,549
it looks up the address and decides where
to send it next.

121
00:09:42,549 --> 00:09:48,108
It could, instead, start forwarding the
packet after it had just seen the header,

122
00:09:48,108 --> 00:09:50,334
and not wait for the whole packet to
arrive.

123
00:09:50,334 --> 00:09:54,271
That's something we call cut through
switching, but internet routers generally

124
00:09:54,271 --> 00:09:57,251
don't do that.
In a later video, and in some of the

125
00:09:57,251 --> 00:10:00,752
exercises, we'll see examples of cut
through packet switches.

126
00:10:00,752 --> 00:10:05,006
But getting back to our example, which is
a store and forward network where every

127
00:10:05,006 --> 00:10:07,601
switch is going to store and forward the
packets.

128
00:10:07,601 --> 00:10:12,595
Switch one, S1, is gonna look at the
packet after its completely arrived, and

129
00:10:12,595 --> 00:10:15,536
then it's gonna send it on to the next
link.

130
00:10:15,536 --> 00:10:20,527
It's gonna send it on to S2.
So here we can see that packet going on

131
00:10:20,527 --> 00:10:24,977
to, to S2.
So just as before, it takes L2/C

132
00:10:24,977 --> 00:10:31,571
for the first bit to arrive at S2 and then
the last bit will arrive P/R2 seconds

133
00:10:31,571 --> 00:10:35,499
later.
And we can just repeat this whole process

134
00:10:35,499 --> 00:10:39,444
for each of the links in turn until we get
to B.

135
00:10:39,444 --> 00:10:46,266
So the overall end-to-end delay expression
is just the sum of those from end to end,

136
00:10:46,266 --> 00:10:49,653
which is the same expression we had
before.

137
00:10:49,653 --> 00:10:54,313
Okay, so it turns out I've only told you
part of the story.

138
00:10:54,313 --> 00:11:00,080
Let me tell you the rest of the story.
See, the thing about packet switching is

139
00:11:00,080 --> 00:11:05,301
that your packets share the links with
packets from other users.

140
00:11:05,301 --> 00:11:11,342
When several packets show up at the same
time wanting to go on the same link.

141
00:11:11,342 --> 00:11:15,678
And you can see this here.
We've got packets coming from here, may be

142
00:11:15,678 --> 00:11:18,552
from another link entering the packet
switch.

143
00:11:18,552 --> 00:11:23,004
And from here coming into the packet
switch from another link.

144
00:11:23,004 --> 00:11:26,794
All wanting to go on the outgoing link
from S2 to S3.

145
00:11:26,794 --> 00:11:32,026
When this happens all of the packets are
gonna have to fight or contend for that

146
00:11:32,026 --> 00:11:37,441
outgoing link.
So when several packets show up at the

147
00:11:37,441 --> 00:11:41,608
same time, wanting to go on the same link,
in this case from S2 to S3.

148
00:11:41,608 --> 00:11:45,075
Then some of the packets have to wait in
the router's queue.

149
00:11:45,075 --> 00:11:49,925
And this little symbol here, see this
little red symbol here is the, the picture

150
00:11:49,925 --> 00:11:54,597
that I'm gonna draw for a queue.
Some people call that a packet buffer.

151
00:11:54,597 --> 00:11:59,409
In general that's a first come, first
serve queue, in which the packets are

152
00:11:59,409 --> 00:12:02,465
gonna depart in the same order that they
arrive.

153
00:12:02,465 --> 00:12:07,535
We're gonna say that the link from S2 to
S3 is congested, because there are lots of

154
00:12:07,535 --> 00:12:12,442
packets queued waiting to travel along it.
The packet buffer helps prevent us from

155
00:12:12,442 --> 00:12:16,510
having to drop any packets.
The bigger the buffer is the less likely

156
00:12:16,510 --> 00:12:20,644
we are to have to drop a packet that wants
to travel across the link.

157
00:12:20,644 --> 00:12:24,656
So these packet buffers.
They're going to be in all of the

158
00:12:24,656 --> 00:12:27,431
switches.
Every packet switch has buffers, and

159
00:12:27,431 --> 00:12:32,400
they're fundamental to packet switching.
If we didn't have packet buffers, then

160
00:12:32,400 --> 00:12:36,976
we'd lose a packet every time two packets
showed up at the same time wanting to

161
00:12:36,976 --> 00:12:40,402
travel across a link.
So packet buffers are our friends.

162
00:12:40,402 --> 00:12:45,363
But the packet buffers themselves are
going to change our expression for the end

163
00:12:45,363 --> 00:12:48,521
to end delay.
If our packet arrives and the, the queue

164
00:12:48,521 --> 00:12:53,786
has some packets in it, then it's going to
delay the time that it can be forwarded

165
00:12:53,786 --> 00:12:57,520
onto the next link.
Because it will have to wait for the

166
00:12:57,520 --> 00:13:02,436
packets that are ahead of it to leave
first before our packet gets to go.

167
00:13:02,436 --> 00:13:05,366
So, I've just shown this is, here is, q2
of t.

168
00:13:05,366 --> 00:13:11,305
Meaning, it's going over the link from s2
and I've said it's q2 of t because, it's

169
00:13:11,305 --> 00:13:15,395
gonna vary with time.
It's gonna depend on how many other

170
00:13:15,395 --> 00:13:21,478
packets are showing up from other users.
So if there are three packets ahead of us,

171
00:13:21,478 --> 00:13:25,947
we'll have to wait for three packetization
delays before it's our turn to go.

172
00:13:25,947 --> 00:13:30,342
I've shown this just in one queue, of
course this could be in all of the

173
00:13:30,342 --> 00:13:35,672
switches along the way it just makes the
figure a bit more complicated so I've just

174
00:13:35,672 --> 00:13:40,582
shown it in queue two.
So our end to end delay now has a third

175
00:13:40,582 --> 00:13:45,064
component to it.
It has in it the packetization delay that

176
00:13:45,064 --> 00:13:48,356
we saw before.
That's P over R sub I.

177
00:13:48,356 --> 00:13:52,539
Then it has the
Propagation delay over the link and then

178
00:13:52,539 --> 00:13:58,068
it has this new expression QI of T which
is the delay of the packet in the queue

179
00:13:58,068 --> 00:14:02,533
waiting for other packets.
And this could be zero if there are no

180
00:14:02,533 --> 00:14:08,208
other packets of course but in general,
it's gonna be some non deterministic value

181
00:14:08,208 --> 00:14:13,694
because we don't know whoever else is
sending packets at the same time.

182
00:14:13,694 --> 00:14:20,047
So the most important thing to note here
is, everything is deterministic except the

183
00:14:20,047 --> 00:14:23,973
queuing delay.
P over R sub I, LI over C, they're both

184
00:14:23,973 --> 00:14:27,822
deterministic.
It's QI sub, QI of T, the queuing delay,

185
00:14:27,822 --> 00:14:32,677
that is the variable component.
And to convince you that, really in

186
00:14:32,677 --> 00:14:35,414
practice, there are.
There is variability.

187
00:14:35,414 --> 00:14:39,133
I'm gonna show you an example in a moment.
One last thing.

188
00:14:39,133 --> 00:14:43,715
So you may have noticed that, that I, that
I use the, the British spelling for

189
00:14:43,715 --> 00:14:47,239
queuing.
That's not cuz I'm English but very common

190
00:14:47,239 --> 00:14:51,990
in, in, when talking about the internet,
to spell queuing Q, U, E, U, E, I, N, G

191
00:14:51,990 --> 00:14:56,198
seems like too many vowels, I know.
But this was the convention adopted by

192
00:14:56,198 --> 00:15:00,658
Kleinrock, one of the pioneers and
inventors of the Internet back in the

193
00:15:00,658 --> 00:15:03,774
1960s.
But you'll see both, both the UK and the

194
00:15:03,774 --> 00:15:09,744
US spelling and that's just fine.
So in summary, is our overall expression

195
00:15:09,744 --> 00:15:14,574
for the end-to-end delay.
It's taking into consideration the queuing

196
00:15:14,574 --> 00:15:19,054
delay at each packet switch along the way.
It's really important to remember that the

197
00:15:19,054 --> 00:15:23,532
queuing delay is unpredictable, it depends
on the traffic sent by other users in the

198
00:15:23,532 --> 00:15:25,931
network.
As far as we're concerned the queuing

199
00:15:25,931 --> 00:15:29,599
delay is a random variable, it's the only
random variable in our expression for end

200
00:15:29,599 --> 00:15:31,874
to end delay.
Everything else is deterministic.

201
00:15:31,874 --> 00:15:36,836
So in case you don't believe me, that the
end to end delay is unpredictable, we're

202
00:15:36,836 --> 00:15:39,991
gonna measure it.
I'm gonna use a very widely used tool

203
00:15:39,991 --> 00:15:44,513
called PING, P-I-N-G, to measure the end
to end delay between my computer and other

204
00:15:44,513 --> 00:15:47,778
computers in the internet.
Ping is gonna measure this end to end

205
00:15:47,778 --> 00:15:50,566
delay.
In fact, it's gonna measure the round trip

206
00:15:50,566 --> 00:15:54,864
time, which is end to end, sum of the end
to end delay in both directions.

207
00:15:54,864 --> 00:15:57,435
You'll find the PING command on your
computer.

208
00:15:57,435 --> 00:16:01,473
And you can use it to repeat the
measurements I'm about to do on your own

209
00:16:01,473 --> 00:16:04,431
computer.
And it's kind of a fun thing to do.

210
00:16:04,431 --> 00:16:10,041
We can measure the delay of packet to
cross the internet using the ping command.

211
00:16:10,041 --> 00:16:14,246
I'm gonna show you an example of the ping
command right now.

212
00:16:14,246 --> 00:16:18,052
So, I'm going to ping from my computer to
princeton.edu.

213
00:16:18,052 --> 00:16:22,040
Princeton is a university in New Jersey in the 
United States.

214
00:16:22,040 --> 00:16:27,795
It's about 4,000 kilometers or two and a
half thousand miles from where, where I

215
00:16:27,795 --> 00:16:29,699
am.
And as I do this, you can see.

216
00:16:29,699 --> 00:16:35,132
Over on the right hand side it's showing
me the time that it takes for the packets

217
00:16:35,132 --> 00:16:38,417
that I sent to go to Princeton and back
again.

218
00:16:38,417 --> 00:16:41,967
So let's see if I can highlight these so
if you see them.

219
00:16:41,967 --> 00:16:46,518
Like, here, these are the times of the
packets to go there and back again.

220
00:16:46,518 --> 00:16:51,904
So those numbers there are about 100
milliseconds, corresponding to the time

221
00:16:51,904 --> 00:16:56,599
that it takes for a packet to go there and
back, or round trip time.

222
00:16:56,599 --> 00:17:02,135
Let's see how that compares say with
if I ping to let's try the University of,

223
00:17:02,135 --> 00:17:05,367
Tsinghua University in, in, Beijing in
China.

224
00:17:05,367 --> 00:17:11,026
So you're gonna see that's a lot further
away, that's about 10,000 kilometers away

225
00:17:11,026 --> 00:17:16,405
from me or about 6,000 miles.
You can see that the ping times are much

226
00:17:16,405 --> 00:17:19,850
greater.
So if I can just highlight those, we can

227
00:17:19,849 --> 00:17:23,786
see those, they're more like 200
milliseconds.

228
00:17:23,787 --> 00:17:32,261
So I used ping to measure a few hundred
RTT values from my computer at Stanford to

229
00:17:32,261 --> 00:17:38,418
Princeton, and as I said earlier, it's
about 4,000 kilometers or two and a half

230
00:17:38,418 --> 00:17:42,828
thousand miles away.
The graph shows the CDF, that's the

231
00:17:42,828 --> 00:17:48,121
cumulative distribution function for the
values that I measured.

232
00:17:48,121 --> 00:17:54,338
So zero%, this means that none of the
values were below this value here which is

233
00:17:54,338 --> 00:18:00,586
about 100 milliseconds.
And 100 percent of them were less than

234
00:18:00,586 --> 00:18:06,522
let's say, 300 milliseconds.
A little hard to tell on this graph here.

235
00:18:06,522 --> 00:18:13,337
So this shows the, the range and also the,
the variation in the, the values that I

236
00:18:13,337 --> 00:18:17,725
measured.
And the overall variance is about the

237
00:18:17,725 --> 00:18:24,703
variation is about 50 milliseconds.
And the, the 90 percent of the samples

238
00:18:24,703 --> 00:18:30,822
fell between 100 and 120 milliseconds.
Now, let's look what happened when I

239
00:18:30,822 --> 00:18:36,721
repeated the experiment from Stanford to
Tsinghua University which is in Beijing in

240
00:18:36,721 --> 00:18:38,813
China.
So, a lot further away.

241
00:18:38,813 --> 00:18:45,101
It's about 10,000 kilometers away or 6000
miles and as I would expect, the RTT

242
00:18:45,101 --> 00:18:50,259
values are much larger because the
propagation delay is much higher.

243
00:18:50,259 --> 00:18:54,981
But also notice that the RTT samples have
much greater variance.

244
00:18:54,981 --> 00:18:59,118
They vary by a lot more.
Look at this value over here.

245
00:18:59,118 --> 00:19:03,913
These, this range of values.
They're varying by a lot more than the

246
00:19:03,913 --> 00:19:08,079
ones over the shorter length from Stanford
to Princeton.

247
00:19:08,079 --> 00:19:12,136
So that variation here comes from the
queueing delay.

248
00:19:12,136 --> 00:19:17,959
My packets are encountering more queues,
more congestion, more other users, more

249
00:19:17,959 --> 00:19:22,870
other user's traffic when they're going
across the Pacific to, to China.

250
00:19:22,870 --> 00:19:27,558
My packets meet other packets in the
router buffers along the way, and so they

251
00:19:27,558 --> 00:19:32,070
get held up, they have to wait for longer,
and I guess probably because there are

252
00:19:32,070 --> 00:19:36,501
more hops and more likely to encounter
other peoples' packets along the way.

253
00:19:36,501 --> 00:19:41,428
With a range of about 200 milliseconds,
you know it's about 320 down here and

254
00:19:41,428 --> 00:19:45,717
maybe they're going up to about 520, with
a range of about 200 milliseconds.

255
00:19:45,717 --> 00:19:49,715
The queueing delay is making up almost
half of the overall end to end delay,

256
00:19:49,715 --> 00:19:53,845
that's pretty high, in fact that's kind of
unusually high,

257
00:19:53,845 --> 00:19:57,362
which is why I showed you this, as an example,
just to get a point across.

258
00:19:57,362 --> 00:20:00,815
In summary, the end-to-end delay is
determined by three components.

259
00:20:00,815 --> 00:20:05,468
The first is the propagation delay along
the links, which is determined by the

260
00:20:05,468 --> 00:20:08,312
length of the links and the propagation
speed.

261
00:20:08,312 --> 00:20:12,648
The second is the packetization delay,
which is determined by the length of the

262
00:20:12,648 --> 00:20:17,124
packet and the data rate of each link.
The third is the queuing delay, which is

263
00:20:17,124 --> 00:20:21,492
determined by the congestion and the
queuing delay in the buffers and the

264
00:20:21,492 --> 00:20:25,500
routers along the path.
This is the end of the video on end-to-end

265
00:20:25,500 --> 00:20:28,955
delay in packet switching.
In the next video, I will be explaining

266
00:20:28,955 --> 00:20:33,551
what some of the consequences are of these
variable queuing delay, particularly in

267
00:20:33,551 --> 00:20:38,393
real-time applications which frequently
use playback buffers to absorb this variation.

