1
00:00:00,000 --> 00:00:04,142
So NATs provide a really useful service.
They allow you to share an IP address

2
00:00:04,142 --> 00:00:08,125
among many hosts, which is real useful
today, given that IP addresses are

3
00:00:08,125 --> 00:00:11,524
becoming more scarce.
They also can provide some other useful

4
00:00:11,524 --> 00:00:14,817
services, such as a limited degree of
security and firewalling.

5
00:00:14,817 --> 00:00:18,960
So there are a lot of implications to what
happens when you're behind the NAT.

6
00:00:18,960 --> 00:00:22,943
So this video is going to go into what
some of those implications are and how

7
00:00:22,943 --> 00:00:27,138
some modern applications today try to deal
with them when there are obstructions.

8
00:00:27,139 --> 00:00:31,281
So the first implication to applications of
a network address translator is that,

9
00:00:31,281 --> 00:00:35,377
generally speaking incoming connections
you can't have an incoming connection.

10
00:00:35,377 --> 00:00:37,494
So we saw this back when we talked about
Skype.

11
00:00:37,494 --> 00:00:41,458
What happens is when you want to open a
call to somebody who's behind a NAT, you

12
00:00:41,458 --> 00:00:43,620
can't directly open a TPC connection to
them,

13
00:00:43,620 --> 00:00:47,880
Because there's no mapping on this.
So let's walk through how that works.

14
00:00:47,880 --> 00:00:54,909
So here, we have an SSH server, or we have
a server sitting behind a NAT, here's

15
00:00:54,909 --> 00:00:58,381
server A.
And it has, and so it happens to be

16
00:00:58,381 --> 00:01:05,411
running an SSH server on port22, and it
has, you know, opened a connection to this

17
00:01:05,411 --> 00:01:09,750
server S.
It's browsing the web, you know, it does a

18
00:01:09,750 --> 00:01:12,267
web connection.
This is great.

19
00:01:12,267 --> 00:01:18,690
So now, what happens when host B wants to
open an SSH connection to host A?

20
00:01:18,690 --> 00:01:22,050
.
Well, the problem is, it's going to be

21
00:01:22,050 --> 00:01:30,054
sending a packet to this NAT and whatever
happens, somehow this packet needs to be

22
00:01:30,054 --> 00:01:36,157
translated to be going to 10.0.0.101:22,
but there's no mapping for that.

23
00:01:36,157 --> 00:01:40,913
Ssh is a server.
It doesn't issue connection requests out.

24
00:01:40,913 --> 00:01:45,907
It receives connection requests and so the
NAT has no mapping.

25
00:01:45,907 --> 00:01:52,724
And so, because there's no mapping, to
10.0.0.101:22, B effectively can't open an

26
00:01:52,724 --> 00:01:57,084
SSH connection.
Alright, the NAT allows connections out,

27
00:01:57,084 --> 00:02:03,562
it does not allow connections in,
And so this poses all kinds of

28
00:02:03,562 --> 00:02:07,107
complications for applications.
Where, you know, what happens if, say, I'm

29
00:02:07,107 --> 00:02:11,311
running Skype and I would like to make a
phone call, if the other node's behind the

30
00:02:11,311 --> 00:02:13,539
NAT, I can't open a connection to that
node.

31
00:02:13,691 --> 00:02:17,793
And so, it really restricts the kinds of
services that you can deploy and, you have

32
00:02:17,793 --> 00:02:21,896
to jump through a bunch of hoops in order
to make applications work when they're

33
00:02:21,896 --> 00:02:26,374
sitting behind NATs.
But so, this is the number one implication

34
00:02:26,374 --> 00:02:30,332
of sitting behind the NAT, to an
application, which is that, essentially,

35
00:02:30,332 --> 00:02:34,120
if you're behind the NAT, generally
speaking, other nodes, unless you

36
00:02:34,120 --> 00:02:38,587
coordinate very carefully, and I'll show
some ways you can do it, you can't open,

37
00:02:38,587 --> 00:02:42,827
nobody can open a connection to you.
So the first approach, and, talked about

38
00:02:42,827 --> 00:02:47,576
this briefly, in the Skype lecture before,
is something called connection reversal.

39
00:02:47,576 --> 00:02:52,100
So imagine that A is sitting behind a NAT,
and B wants to open a connection to A.

40
00:02:52,940 --> 00:02:57,858
Well, B can't, because the NAT has no
mapping, these packets will pass up, you

41
00:02:57,858 --> 00:03:02,908
know, bounce off, you get ICMP errors.
And so, what you can do, is have some kind

42
00:03:02,908 --> 00:03:08,023
of reversal service or some kind of
rendezvous service, where both A and B are

43
00:03:08,023 --> 00:03:13,072
connected to the rendezvous service.
And when B wants to open a connection to

44
00:03:13,072 --> 00:03:17,860
A, what it actually sends is it sends a
request, hey, A, I want a connection.

45
00:03:22,326 --> 00:03:29,043
The rendezvous service can forward this
request on, then A can open a connection

46
00:03:29,043 --> 00:03:31,121
to B,
So this is called connection reversal.

47
00:03:31,121 --> 00:03:35,381
Because B wants to open a connection to A,
but because it can't, because of the NAT,

48
00:03:35,381 --> 00:03:39,122
So instead you reverse the connection and
have A open a connection to B.

49
00:03:39,122 --> 00:03:42,707
And to do this, you need some kind of
rendezvous service so that the two can

50
00:03:42,707 --> 00:03:46,916
communicate, by they both open outgoing
connections to the rendezvous service, and

51
00:03:46,916 --> 00:03:51,280
then, requests are forwarded in that way.
So this is for example one of the things

52
00:03:51,280 --> 00:03:54,034
that Skype does.
So another approach, and this is also

53
00:03:54,034 --> 00:03:58,087
some, this is also what Skype does, is if
both hosts are behind a NAT, well, this

54
00:03:58,087 --> 00:04:02,280
means that neither of them can directly
open a connection to the other.

55
00:04:02,280 --> 00:04:05,325
Both cases, the connection request will
fail.

56
00:04:05,325 --> 00:04:09,825
There's no mapping on the NAT, generally
speaking, and so it fails.

57
00:04:09,825 --> 00:04:17,625
So instead you usually have both of them
connect to some relay R,

58
00:04:17,625 --> 00:04:21,947
And then the relay R forwards traffic
between those two connections.

59
00:04:21,947 --> 00:04:26,650
So, data that streams in from A's
connection that R receives, then forwards

60
00:04:26,650 --> 00:04:32,764
to the connection to B,
Data that comes in from B's connection, R

61
00:04:32,810 --> 00:04:37,473
receives and forwards to A.
But here's an example of suddenly this is

62
00:04:37,534 --> 00:04:39,108
no longer end to end.
We've now introduced this additional host

63
00:04:39,108 --> 00:04:42,031
in the center and who knows what could go
wrong.

64
00:04:42,222 --> 00:04:46,798
So certainly, if you're doing this, it's
good to encrypt your traffic, unless,

65
00:04:46,798 --> 00:04:50,451
unless you trust the relay.
But this is a way that if both hosts got

66
00:04:50,451 --> 00:04:54,988
a NAT, they can still open connections to
one another, admittedly, through a third

67
00:04:54,988 --> 00:04:59,129
host that is and does have a publicly
routed IP address, and which is not

68
00:04:59,129 --> 00:05:02,977
sitting behind a NAT.
So that's sort of some basic things that

69
00:05:02,977 --> 00:05:06,023
you can just say at the TCP level and
etcetera.

70
00:05:06,023 --> 00:05:11,531
It turns out that if you really need to
open up direct connections, there are more

71
00:05:11,531 --> 00:05:17,170
aggressive and tricky things you can do.
One of which is called NAT hole-punching.

72
00:05:17,170 --> 00:05:21,223
And so, the basic idea here is that we
have these two clients that are sitting

73
00:05:21,223 --> 00:05:24,654
behind that, it's client A and client B,
And they want to open up direct

74
00:05:24,654 --> 00:05:28,240
connections to one another or a direct
connection between each other.

75
00:05:28,240 --> 00:05:32,190
They don't want to go through some
external rendezvous service or relay.

76
00:05:32,190 --> 00:05:38,444
And so what they do, is they first talk
with some external server to figure out

77
00:05:38,444 --> 00:05:41,294
what, you know, use some service over
here,

78
00:05:41,294 --> 00:05:45,727
To figure out what their external address
and ports are.

79
00:05:45,727 --> 00:05:50,556
So client B says, aha,
If I send you packets, say, from UDP Port,

80
00:05:50,794 --> 00:05:55,050
6000,
The server will then report back with a

81
00:05:55,050 --> 00:06:00,359
message saying, aha,
Well, these packets you're sending,

82
00:06:00,359 --> 00:06:09,329
I see them coming from 76.18.117.20:9091.
So the client B knows that 10.1.1.9:6000

83
00:06:09,336 --> 00:06:15,900
appears externally to the world as
76.18.17.20:9091, And A does the same

84
00:06:15,900 --> 00:06:19,497
thing.
So it'll find out that, you know, it's

85
00:06:19,761 --> 00:06:27,598
packets look like 34.22.8:30005 or so.
So now, in these cases, both clients A and

86
00:06:27,598 --> 00:06:37,493
B have sent packets over the NAT from this
internal address port pair to this ex, to

87
00:06:37,493 --> 00:06:42,214
an external IP address, and port.
And the NATs have created mappings,

88
00:06:42,214 --> 00:06:47,479
So they have mappings internally,
For this internal address port.

89
00:06:47,479 --> 00:06:52,549
And let's just say that they're full cone
NATs just for simplicity sake.

90
00:06:52,549 --> 00:06:56,585
This means that these mappings are now
active on the NATs,

91
00:06:56,585 --> 00:07:02,082
And so it's possible now, if communicating
with the server client B can ask the

92
00:07:02,082 --> 00:07:05,770
server, hey, what's client A's public IP
address and port?

93
00:07:05,770 --> 00:07:13,972
Based on that, the server could say, oh,
well it's 128.34.22.8:30005.

94
00:07:13,983 --> 00:07:24,354
And client B could send traffic to that,
Public IP address and port pair, and it

95
00:07:24,354 --> 00:07:26,826
could diverse the NAT mapping.
Right.

96
00:07:26,826 --> 00:07:32,426
Similarly, A could ask the server, hey,
what's B's I, public IP address and port

97
00:07:32,426 --> 00:07:37,735
pair, then send traffic to
76.18.17.20:9091 and have it traverse the

98
00:07:37,735 --> 00:07:42,680
mapping and go to client B.
This is assuming that those mappings are

99
00:07:42,680 --> 00:07:45,225
full cone.
These are full cone NATs.

100
00:07:45,225 --> 00:07:50,933
Let's say that they're not full cone NATs.
Well, it turns out you can still do some

101
00:07:50,933 --> 00:07:54,184
tricks,
Where the server can tell client A and

102
00:07:54,184 --> 00:07:59,640
client B again what the public IP address
port pairs are of the other clients and

103
00:07:59,640 --> 00:08:04,547
then the clients can try sending traffic
to each other simultaneously.

104
00:08:04,547 --> 00:08:11,207
And so client B will start sending traffic
to 128.34.22.8:30005 from it's port 6000.

105
00:08:11,207 --> 00:08:18,147
Simultaneously, client A will start
sending traffic to 76.18.17.20:9091 from

106
00:08:18,147 --> 00:08:22,072
it's IP address and port.
And what's going to happen is that, if we

107
00:08:22,072 --> 00:08:26,633
say, had a restricted cone NAT or even a
port restricted NAT, when those packets,

108
00:08:26,979 --> 00:08:31,020
those, outgoing packets traverse the NAT,
The NAT is going to set up a mapping.

109
00:08:31,020 --> 00:08:35,118
It's going to say, aha, I see that you
client A, are sending traffic to this

110
00:08:35,118 --> 00:08:39,101
external IP address and port.
I'll create a mapping for you so things

111
00:08:39,101 --> 00:08:42,623
are translated properly.
Similarly, this NAT on the right, it's

112
00:08:42,623 --> 00:08:47,285
going to when client B sends the traffic.
And so by knowing what the external

113
00:08:47,285 --> 00:08:52,130
address and ports are of the other side,
they can force the NAT to set up a

114
00:08:52,130 --> 00:08:55,880
mapping.
So one question is, is there a kind of NAT

115
00:08:55,880 --> 00:09:02,710
or what kinds of NATs would this not work
for this model where client A and client B

116
00:09:02,710 --> 00:09:07,802
simultaneously send traffic to the
external IP address and port that map to

117
00:09:07,802 --> 00:09:13,295
internal IP address and port issues
clients, which were determined earlier by

118
00:09:13,295 --> 00:09:17,784
communicating with the server.
So given we have this, this different

119
00:09:17,784 --> 00:09:22,340
kinds of NAT's, is there a kind of NAT for
which this would not work?

120
00:09:25,380 --> 00:09:29,743
So it turns out this will work for full
cone NATs, because the mappings will work

121
00:09:29,743 --> 00:09:33,245
fine even if the, the, source IP address
and port are different.

122
00:09:33,245 --> 00:09:37,663
It will work for, restricted cone NAT,
because again, we've set up these mappings

123
00:09:37,663 --> 00:09:40,896
which will include the external IP address
of the other NAT.

124
00:09:41,057 --> 00:09:45,044
It'll work for port restricted NATs,
because again, these packets will be

125
00:09:45,044 --> 00:09:48,977
coming from the right UDP ports.
The one class of NAT it won't work for is

126
00:09:48,977 --> 00:09:51,940
a symmetric NAT,
Because when these clients talk to the

127
00:09:51,940 --> 00:09:55,550
server to figure out their IP address and
port, their external ones,

128
00:09:55,550 --> 00:10:00,498
That mapping won't hold when they start
talking to another NAT.

129
00:10:00,498 --> 00:10:06,333
So, just because the server port 30,005,
When client A then tries to send traffic

130
00:10:06,333 --> 00:10:10,964
to the NAT on the right, the, this the NAT
is not going to reuse port 30005.

131
00:10:10,964 --> 00:10:14,585
It's going to allocate a new external port
and so it won't work.

132
00:10:14,585 --> 00:10:19,393
So this is one reason why symmetric NATs
are really frowned upon in the Interent

133
00:10:19,393 --> 00:10:22,637
today.
So we've talked about implications of NATS

134
00:10:22,637 --> 00:10:28,212
to applications and how they have to do
things to set up mappings, or either use

135
00:10:28,212 --> 00:10:33,047
relays or rendezvous services.
So there's another, perhaps even deeper

136
00:10:33,047 --> 00:10:38,890
implication of NATs which is to transport.
So if you think for a second, for a NAT to

137
00:10:38,890 --> 00:10:42,450
set up a mapping, it needs to know what
the transport,

138
00:10:42,619 --> 00:10:45,674
Protocol is.
It needs to know the transport protocol's

139
00:10:45,674 --> 00:10:48,332
header.
So, for example, when it sets up a UDP or

140
00:10:48,332 --> 00:10:52,574
TCP mapping, the NAT needs to know that
this is a TCP segment, this is a UDP

141
00:10:52,574 --> 00:10:57,099
segment, this is where the port number is
in that segment. This is what I need to

142
00:10:57,099 --> 00:11:01,398
rewrite, rhis is where checksums are calculated.
And without that, it can't do it.

143
00:11:01,398 --> 00:11:05,754
So if you deploy, if you say, write a new
transport protocol, use the transport

144
00:11:05,754 --> 00:11:10,405
protocol identifier in an IP packet,
And you try to get it to traverse a NAT, a

145
00:11:10,405 --> 00:11:13,340
NAT will discard it.
It doesn't know the target format.

146
00:11:13,880 --> 00:11:18,740
And so in this way,
You can't really deploy a new transport

147
00:11:18,740 --> 00:11:22,440
protocol on the internet today.
So, there's a chicken and egg problem,

148
00:11:22,440 --> 00:11:27,051
where the people developing that software
and maintaining the NAT software will not

149
00:11:27,051 --> 00:11:30,980
add support for a new transport protocol
until it's very, very popular,

150
00:11:30,980 --> 00:11:35,004
But it won't become very popular until it
works across NATs.

151
00:11:35,004 --> 00:11:40,101
And so, there's this, sort of debate and
philosophical discussion, right, until the

152
00:11:40,101 --> 00:11:45,802
early you know, mid 2000s about how NATs
mean that were basically stuck with TCP,

153
00:11:45,802 --> 00:11:50,631
UDP, and ICMP, right, to have an
application work for real on the internet

154
00:11:50,631 --> 00:11:54,790
at large, it has to use one of those three
transport protocols.

155
00:11:54,790 --> 00:11:58,381
And, so, really, with NATs today, we're
not going to see any new transport

156
00:11:58,381 --> 00:12:01,815
protocols from the Internet.
And, so, this leads to this really big

157
00:12:01,815 --> 00:12:06,410
philosophical debate especially occurring
as nats deployed in the early 2000s.

158
00:12:06,410 --> 00:12:08,892
About, on one hand, nats are astoundingly
useful.

159
00:12:08,892 --> 00:12:12,167
You can reuse addresses.
For security, you know, if I am sitting

160
00:12:12,167 --> 00:12:15,389
behind a NAT, and I happen to have some
vulnerable open ports,

161
00:12:15,389 --> 00:12:17,819
Say, on my Linux machine or my Windows
machine.

162
00:12:17,819 --> 00:12:21,326
Since there's no mapping,
Attackers from outside of the broad

163
00:12:21,326 --> 00:12:23,998
internet can't, can't compromise me,
Right?

164
00:12:23,998 --> 00:12:28,431
So, gives this very simple, I mean, very
sledgehammery but, but very [laugh]

165
00:12:28,431 --> 00:12:33,117
effective just for end users security,
right and not opening connections can be

166
00:12:33,117 --> 00:12:35,900
good.
But, there's also a, they're also

167
00:12:35,900 --> 00:12:40,576
tremendously painful, especially before
NAT started to have standard behavior,

168
00:12:40,879 --> 00:12:45,616
developing applications is really hard.
Imagine, if somebody calls you and says,

169
00:12:45,616 --> 00:12:50,110
hey, your application doesn't work, you
know, sometimes the connection drops.

170
00:12:50,110 --> 00:12:54,534
And it could be something like, it happens
to be that it's when their client is

171
00:12:54,534 --> 00:12:58,958
transitioning from one server to another.
And the NAT is using a symmetric, is a

172
00:12:58,958 --> 00:13:03,663
symmetric NAT, such that the ports are
being reallocated and the connection

173
00:13:03,663 --> 00:13:05,399
breaks.
Really hard to debug.

174
00:13:05,567 --> 00:13:09,927
And so one example, there's this really
famous example is this thing called Speak

175
00:13:09,927 --> 00:13:12,174
Freely, which is this pre-Skype Voice over
IP.

176
00:13:12,317 --> 00:13:15,998
And, basically the guy said, hey I'm going
to stop developing Speak Freely because,

177
00:13:15,998 --> 00:13:19,869
you know, it just doesn't work under NATs
and there's no way to make them work at

178
00:13:19,869 --> 00:13:22,164
NATs.
This was before people figured out all the

179
00:13:22,164 --> 00:13:25,080
hole punching and before the behavior
standard have to do so.

180
00:13:25,080 --> 00:13:27,400
And so, there's this huge philosophical
debate.

181
00:13:27,400 --> 00:13:31,435
NATs good, NATs bad, they break the end
to end argument, but really, it's really.

182
00:13:31,435 --> 00:13:34,057
It's very interesting, but turns out to be
pointless.

183
00:13:34,057 --> 00:13:36,378
I mean, NATs are here to stay.
They're deployed.

184
00:13:36,378 --> 00:13:39,303
They'll always be deployed.
Their advantages, generally, are

185
00:13:39,303 --> 00:13:43,489
considered to outweigh, the disadvantages.
People are going to deploy them, they want

186
00:13:43,489 --> 00:13:45,810
them to work, and you have to work around
them.

187
00:13:45,810 --> 00:13:50,314
But so, what this means is that we in sort
of historically talk about the Internet as

188
00:13:50,314 --> 00:13:53,970
having a narrow waisted IP.
There is a single unifying protocol which

189
00:13:53,970 --> 00:13:57,891
then allows you to have many transfer
protocols above, many link protocols

190
00:13:57,891 --> 00:14:01,030
below, but NATs have changed that.
And so really,

191
00:14:01,030 --> 00:14:05,761
In a practical sense, the new hourglass
includes not only layer three, but also

192
00:14:05,761 --> 00:14:09,523
layer four, because for practical
concerns, we're not going to see new

193
00:14:09,523 --> 00:14:12,374
transport protocols implemented or
deployed.

194
00:14:12,374 --> 00:14:17,045
You can build protocols on top of UDP, and
that's generally what's done today.

195
00:14:17,045 --> 00:14:21,777
Since UDP just provides a nice datagram
service rather than using a transport

196
00:14:21,777 --> 00:14:26,023
identifier at three, at layer three, You
use a port, at layer four.

197
00:14:26,024 --> 00:14:30,998
But this is the world as it is, that now
the new hourglass of the Internet because

198
00:14:30,998 --> 00:14:35,888
the network address translation.
Is IP, then with ICMP, TCP, and UDP, so

199
00:14:35,888 --> 00:14:40,794
you can see how this technology.
Actually cause an architectural shift

200
00:14:40,794 --> 00:14:43,380
within the Internet within the past
decade.

