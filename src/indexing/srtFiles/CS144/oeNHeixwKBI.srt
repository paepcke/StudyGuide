1
00:00:00,000 --> 00:00:04,882
When we connect our computer to the
network today, we're usually using Wi-Fi

2
00:00:04,882 --> 00:00:07,966
for wireless, or Ethernet for a wired
connection.

3
00:00:07,966 --> 00:00:13,041
Ethernet is by far the most widely used
linked layer mechanism in the internet

4
00:00:13,041 --> 00:00:15,868
today.
So, the linked layer covers how an end

5
00:00:15,868 --> 00:00:20,365
host is connected to a router, how one
router is connected to the next.

6
00:00:20,365 --> 00:00:25,246
And generally as we've seen, packets at
the IP layer are encapsulated into a

7
00:00:25,247 --> 00:00:30,130
linked layer frame, most often Ethernet,
in order to be sent off to the first

8
00:00:30,130 --> 00:00:33,271
router.
So, in this video and the next, I'm going

9
00:00:33,271 --> 00:00:38,184
to be describing something called CSMA/CD
which is right at the heart of how

10
00:00:38,184 --> 00:00:42,154
Ethernet works.
And was very much a part of the original

11
00:00:42,154 --> 00:00:45,182
Ethernet.
And I'll be describing how Ethernet

12
00:00:45,182 --> 00:00:47,942
started out,
Its evolution over the years.

13
00:00:47,942 --> 00:00:53,123
And then how Ethernet switching became a
very common way to extend, extend the

14
00:00:53,123 --> 00:00:58,440
scope of a, of a link to cover many, many
end hosts connected to a single router.

15
00:00:58,440 --> 00:01:03,704
You'll often hear Ethernet referred to as
layer two, and this goes back to the seven

16
00:01:03,704 --> 00:01:06,712
layer OSI model what we saw in an earlier
video.

17
00:01:06,712 --> 00:01:11,100
Whereas, in the four layer internet model,
Ethernet is the lowest layer.

18
00:01:11,100 --> 00:01:15,822
In the seven layer of OSI model, Ethernet
encompassed both, link and the physical

19
00:01:15,822 --> 00:01:17,808
layers,
Both of the, the, the lower two.

20
00:01:17,808 --> 00:01:21,350
So, Ethernet is often referred to as layer
two, because of the link.

21
00:01:21,350 --> 00:01:25,697
The link really just covers the frame
format and the algorithm that decides when

22
00:01:25,697 --> 00:01:29,775
a packet can be sent onto the wire.
And we're going to see that a little bit

23
00:01:29,775 --> 00:01:31,761
later,
That's the CSMA/CD mechanism.

24
00:01:31,761 --> 00:01:36,323
The physical layer covers things like the
connectors and the electrical signals that

25
00:01:36,323 --> 00:01:40,201
are used on the wire.
Ethernet started out as a means to connect

26
00:01:40,201 --> 00:01:43,144
multiple computers together on a single
cable.

27
00:01:43,144 --> 00:01:48,327
That single cable was arranged as a long,
a long string or a bus, as shown here.

28
00:01:48,327 --> 00:01:52,998
It was, in fact, a big, thick, yellow
cable that snaked around, either in the

29
00:01:52,998 --> 00:01:58,117
walls, the ceiling, or under the floor.
And computers would be connected down into

30
00:01:58,117 --> 00:02:02,020
it, and then they are all sharing access to
the same common wire.

31
00:02:02,020 --> 00:02:07,061
And the idea was, that they would share it
in order to be able to send packets

32
00:02:07,061 --> 00:02:11,556
between themselves.
But then only one packet would be allowed

33
00:02:11,556 --> 00:02:16,824
onto the cable at a time because,
otherwise, it would collide or corrupt and

34
00:02:16,824 --> 00:02:21,740
interfere with other packets.
So, this is what we call sharing a medium.

35
00:02:21,740 --> 00:02:26,726
And, Ethernet is an example of when
multiple hosts share a common cable,

36
00:02:26,937 --> 00:02:31,923
that's what we mean by medium.
So, to share the medium, we need to decide

37
00:02:31,923 --> 00:02:36,178
who gets to send, and when.
Because if only one packet can be sent on

38
00:02:36,178 --> 00:02:39,821
the medium at a time,
We need to decide when the medium becomes

39
00:02:39,821 --> 00:02:44,158
free, who is it that gets to use it next?
Do they do it in round robin order?

40
00:02:44,158 --> 00:02:47,049
Do they do it randomly?
Whoever gets to send first?

41
00:02:47,049 --> 00:02:51,501
What is the mechanism for doing so?
And there's generally a class of what are

42
00:02:51,501 --> 00:02:54,739
called medium access control protocols or
MAC protocols.

43
00:02:54,739 --> 00:02:59,365
And these are the protocols or algorithms
for determining who gets to send next.

44
00:02:59,365 --> 00:03:03,702
We're going to look at some examples.
But the one thing to note here is, you've

45
00:03:03,702 --> 00:03:07,750
probably heard Ethernet addresses being
referred to as MAC addresses before.

46
00:03:07,750 --> 00:03:11,505
And you may even see this written on the
bottom of your computer.

47
00:03:11,505 --> 00:03:16,243
MAC stands for medium access control, even
though we'll see later, Ethernet doesn't

48
00:03:16,243 --> 00:03:20,865
use this mechanism very much anymore.
That's just a vestige of, of the earlier

49
00:03:20,865 --> 00:03:23,350
ten megabit per second version of
Ethernet.

50
00:03:23,350 --> 00:03:27,439
Let's take a look at some examples of
medium access control protocols.

51
00:03:27,439 --> 00:03:32,112
There actually been dozens or hundreds of
them described, published, and invented

52
00:03:32,112 --> 00:03:35,033
over the years.
And many of them were standardized.

53
00:03:35,033 --> 00:03:39,823
But, because many of them have gone out of
fashion, I'm really going to be focusing

54
00:03:39,823 --> 00:03:44,788
on just one Ethernet or carrier sense,
multiple access with collision detection,

55
00:03:44,788 --> 00:03:47,709
CSMA/CD, that's the one we're going to be
focusing on.

56
00:03:47,709 --> 00:03:50,747
But, I just want to set it into context a
little bit.

57
00:03:50,747 --> 00:03:53,960
So, there are MAC protocols which are
simple and random.

58
00:03:53,960 --> 00:03:59,292
The simplest of which is something called
Aloha, that I will describe in a moment.

59
00:03:59,292 --> 00:04:03,110
And, at the other extreme is a method
called Token Passing.

60
00:04:03,110 --> 00:04:07,804
Let me describe roughly how these work.
Let me start with a simple and random

61
00:04:07,804 --> 00:04:10,792
mechanisms.
A random access protocol is one where

62
00:04:10,792 --> 00:04:14,694
every host can try to send at any time
that it has data to send.

63
00:04:14,694 --> 00:04:19,693
It doesn't need to wait for some central
authority to give it permission or until

64
00:04:19,692 --> 00:04:22,376
its turn comes around.
It just tries to send.

65
00:04:22,376 --> 00:04:26,888
It might listen and, and, and see whether
anyone else is speaking or it just may go

66
00:04:26,888 --> 00:04:30,119
right ahead.
So, it's random in the sense that it just

67
00:04:30,119 --> 00:04:35,021
may start speaking at any time.
At the other extreme, deterministic

68
00:04:35,021 --> 00:04:41,696
protocols like token passing have some
means to explicitly control who gets to go

69
00:04:41,696 --> 00:04:45,521
next.
In other words, which hosts gets to send a

70
00:04:45,521 --> 00:04:49,672
packet next.
The most common method is called token

71
00:04:49,672 --> 00:04:56,103
passing in which a special packet, or a
token, is sent from one host to the next.

72
00:04:56,103 --> 00:05:00,010
So, they might be arranged, for example,
in a ring.

73
00:05:00,010 --> 00:05:04,951
And there will be a packet called the
token that goes around, this would be the

74
00:05:04,951 --> 00:05:09,205
token packet. And when you hold the token,
you're allowed to send a packet.

75
00:05:09,205 --> 00:05:12,120
So, it might then send a packet on to
another host.

76
00:05:12,120 --> 00:05:16,661
So this would be the packet being sent.
And then, when it's finished sending the

77
00:05:16,661 --> 00:05:19,593
packet, it then passes on the token to its
neighbor.

78
00:05:19,593 --> 00:05:22,410
Who then gets the opportunity to send the
packet,

79
00:05:22,410 --> 00:05:26,722
And then, will send the token on again.
So, the token will go around like the

80
00:05:26,722 --> 00:05:30,056
conch shell in Lord of the Flies if you've
read that book.

81
00:05:30,056 --> 00:05:33,965
Or in any mechanism where we have a round
robin opportunity to send.

82
00:05:33,965 --> 00:05:36,840
And, the token is indicating who gets to
send next.

83
00:05:37,480 --> 00:05:41,545
This gives every host the chance to send
in a deterministic order.

84
00:05:41,730 --> 00:05:45,673
But it does require us to both generate
and maintain this token.

85
00:05:45,673 --> 00:05:50,477
And it turns out that there are lots of
ways in which this mechanism can fail.

86
00:05:50,477 --> 00:05:54,297
And, the token can get lost, or the token
can get duplicated.

87
00:05:54,297 --> 00:05:59,348
And so, these have generally fallen out of
favor and being replaced by the simpler

88
00:05:59,348 --> 00:06:04,338
Ethernet, Ethernet mechanism in which
every host just basically randomly sends.

89
00:06:04,338 --> 00:06:09,020
But, we'll see how that's controlled using
this CSMA/CD mechanism in a moment.

90
00:06:09,020 --> 00:06:13,007
So, generally speaking, random access
protocols are simple enough to implement.

91
00:06:13,165 --> 00:06:17,572
Give really good performance when there are
a small number of senders sending data at

92
00:06:17,572 --> 00:06:21,560
random times, but they work less well
under very heavy load because they can

93
00:06:21,560 --> 00:06:25,915
spend a lot of time colliding with each
other and corrupting each other until they

94
00:06:25,915 --> 00:06:32,850
figure out an opportunity to send.
So, when we're designing a MAC protocol or

95
00:06:32,850 --> 00:06:36,181
choosing one,
Then we have some, we generally have some

96
00:06:36,181 --> 00:06:39,636
goals in mind.
We would like to have high utilization of

97
00:06:39,636 --> 00:06:43,275
the shared channel.
We'd like to make sure that most of the

98
00:06:43,275 --> 00:06:48,334
time is spent sending data not trying to
recover from collisions, or when multiple

99
00:06:48,334 --> 00:06:52,295
end hosts are talking at the same time.
We'd like it to be fair.

100
00:06:52,295 --> 00:06:57,547
We'd like it to be fair in the sense that
everybody gets an equal opportunity to

101
00:06:57,547 --> 00:07:02,798
send averaged over a long period.
We'd like it to be simple and low-cost to

102
00:07:02,798 --> 00:07:06,170
implement so that it can be very widely
deployed.

103
00:07:06,170 --> 00:07:11,356
And we'd like it to be robust to errors.
So, we'd like it that if a, an end host

104
00:07:11,356 --> 00:07:15,960
fails, then the chances are it's not going
to bring the whole network down.

105
00:07:17,400 --> 00:07:22,486
Let me start with an example.
And the example that I'm going to be using

106
00:07:22,486 --> 00:07:28,014
is one of the earliest medium access
control protocols called the Aloha

107
00:07:28,014 --> 00:07:31,995
Protocol that was used in the Aloha
Network in Hawaii.

108
00:07:31,995 --> 00:07:37,449
So, here are the Hawaiian Islands.
Basically, there was a central station in

109
00:07:37,449 --> 00:07:42,301
Oahu where Honolulu is.
And, then there were relays or, or end

110
00:07:42,301 --> 00:07:47,930
attachments at radio transmitters on the
islands of Kauai, Molokai, Maui and

111
00:07:47,930 --> 00:07:51,449
Hawaii.
And, every packet that was sent would be

112
00:07:51,449 --> 00:07:54,756
sent from an end host into the central
station,

113
00:07:54,756 --> 00:07:58,204
Which would then rebroadcast it out to
everybody.

114
00:07:58,204 --> 00:08:02,074
And so, this was radio based, RF based.
There was no wire.

115
00:08:02,074 --> 00:08:05,100
And so, the medium in this case was the
air.

116
00:08:05,100 --> 00:08:10,008
The way that Aloha worked was, all hosts
would transmit on one frequency.

117
00:08:10,008 --> 00:08:14,849
So, if a host has something to send, it
would send on, say, frequency zero.

118
00:08:14,849 --> 00:08:19,963
This blue is just representing the channel
corresponding to frequency zero.

119
00:08:19,963 --> 00:08:25,485
This would be sent up to the main relay
station or the, the central relay station

120
00:08:25,485 --> 00:08:28,721
in, on Oahu.
And then, that would be retransmitted.

121
00:08:28,721 --> 00:08:33,840
The packet data would be retransmitted out
over frequency one, a separate frequency.

122
00:08:33,840 --> 00:08:38,958
So essentially, a separate orthogonal
channel that would then be repeated to all

123
00:08:38,957 --> 00:08:42,040
end hosts.
So, we need a way to decide who can send

124
00:08:42,041 --> 00:08:44,631
when.
And for this, we need a protocol that

125
00:08:44,631 --> 00:08:48,578
everybody agrees upon so that the system
will work correctly.

126
00:08:48,578 --> 00:08:53,450
And, the first Aloha network to use the
Aloha MAC protocol, which is very simple.

127
00:08:53,450 --> 00:08:58,478
If you have data to send, transmit it.
If your transmission collides with

128
00:08:58,478 --> 00:09:00,570
another, retry later.
That was it.

129
00:09:00,570 --> 00:09:05,703
So, very simple. You send, and then if you
discover that it collided, then you would

130
00:09:05,703 --> 00:09:08,556
retry it.
How would you know that it collided?

131
00:09:08,556 --> 00:09:12,042
Well, you would listen,
You would send on frequency zero.

132
00:09:12,042 --> 00:09:16,986
And you would listen on frequency one.
And if what came back was not a correct

133
00:09:16,986 --> 00:09:21,803
copy of what you would sent on frequency
zero, you know it must have collided.

134
00:09:21,803 --> 00:09:26,430
And therefore, you need to send again.
And you would retry at a later time.

135
00:09:26,430 --> 00:09:30,490
Nice thing about the Aloha protocol was
it's very simple.

136
00:09:30,490 --> 00:09:33,589
It's pretty robust against the failure of
an end host.

137
00:09:33,589 --> 00:09:37,262
What do I mean by this?
Well, if an end host fails and just stops

138
00:09:37,262 --> 00:09:41,796
sending, then the mechanism doesn't rely
on any end host being powered on or

139
00:09:41,796 --> 00:09:45,239
correctly operating, because it'll just
stop sending packets.

140
00:09:45,239 --> 00:09:49,716
There is a failure condition if it just
starts jabbering away, sending packets

141
00:09:49,888 --> 00:09:53,963
that, that are meaningless, it can
actually bring down communication for

142
00:09:53,963 --> 00:09:56,890
everyone else.
So, that's why we say that it's quite

143
00:09:56,890 --> 00:10:00,503
robust against failure.
The protocol is distributed, it's

144
00:10:00,503 --> 00:10:06,131
distributed in a sense that it's, it's
actually operating independently on all

145
00:10:06,131 --> 00:10:10,440
the end host. So, they all independentely
decide for themselves.

146
00:10:10,440 --> 00:10:15,861
Under low load when there are very few,
either very few hosts sending or they're

147
00:10:15,861 --> 00:10:20,064
sending at a very low rate, they're
sending infrequently, we can expect the

148
00:10:20,064 --> 00:10:23,302
delay to be small.
Nearly any host who has stated to send

149
00:10:23,302 --> 00:10:27,618
will find that the, the channel is free
when it wants to send its packet. So, it's

150
00:10:27,618 --> 00:10:32,446
very likely to get through the first time,
with very little trouble that doesn't have

151
00:10:32,446 --> 00:10:36,819
to wait for some coordinating mechanism.
It just sends, discovers that it gets

152
00:10:36,819 --> 00:10:40,389
through and that's great.
Under high load, a lot of time can be

153
00:10:40,389 --> 00:10:44,613
wasted sending packets that collide.
Because under high load the chances are

154
00:10:44,613 --> 00:10:48,559
that there are that there other hosts
wanting to send at the same time.

155
00:10:48,559 --> 00:10:53,217
And so, as a consequence, generally
speaking, the Aloha protocol is thought to

156
00:10:53,217 --> 00:10:57,163
have very low performance.
And, in fact, studies and, and theory, and

157
00:10:57,163 --> 00:11:02,263
simulations have all suggested that on the
high load, you can show that the waste,

158
00:11:02,263 --> 00:11:06,378
wasted time is so high, we can only
achieve about 20% throughput,

159
00:11:06,378 --> 00:11:09,367
18%, in fact.
So, over 80% of the time is

160
00:11:09,367 --> 00:11:12,888
spent on transmissions that collide under
very heavy load.

161
00:11:12,888 --> 00:11:15,620
Clear, clearly, we need to improve
performance.

162
00:11:15,620 --> 00:11:20,599
There were many, many papers in the 1970's
and 80's on this topic of how to improve

163
00:11:20,599 --> 00:11:24,781
networks like this.
And the technique most widely adopted for

164
00:11:24,781 --> 00:11:29,398
wired networks is called CSMA/CD and it was
used for, for Ethernet.

165
00:11:29,398 --> 00:11:34,088
And, you can see some of the ideas here
for improving performance.

166
00:11:34,304 --> 00:11:37,112
One is,
Instead of just going ahead and sending,

167
00:11:37,112 --> 00:11:39,703
regardless of whether anyone else is
sending,

168
00:11:39,703 --> 00:11:42,178
You can actually listen for activity
first.

169
00:11:42,178 --> 00:11:46,438
This is the carrier sends part CSMA/CD.
So, you listen, first of all, to check

170
00:11:46,438 --> 00:11:49,604
whether anyone else is sending before
sending a packet.

171
00:11:49,604 --> 00:11:54,152
If they are, you wait. If they're not,
then probably your packet will get through

172
00:11:54,152 --> 00:11:56,444
okay.
The next one is to try and detect

173
00:11:56,444 --> 00:12:01,159
collisions quickly, and stop transmitting.
If you, if you take your time to detect

174
00:12:01,159 --> 00:12:05,933
the collision or we wait until the packet
is over, then you've wasted all of that

175
00:12:05,933 --> 00:12:08,527
time.
If you can detect it very, very quickly,

176
00:12:08,527 --> 00:12:12,889
back off, and then try again later, then
you can improve the performance.

177
00:12:12,889 --> 00:12:17,663
And the third one is, after there has been
a collision, pick a random waiting time

178
00:12:17,663 --> 00:12:20,080
that is based on the load.
In other words,

179
00:12:20,080 --> 00:12:24,699
Pick a random time before trying again.
If the load is high, then wait a long time

180
00:12:24,699 --> 00:12:28,407
because that will give others the
opportunity to be able to send.

181
00:12:28,407 --> 00:12:32,855
If the load is low, then wait a short time
because probably you'll get through

182
00:12:32,855 --> 00:12:36,506
successfully next time.
If the load is high and you wait a short

183
00:12:36,506 --> 00:12:40,555
time, the chances are you'll collide
again, and it will just be a wasted

184
00:12:40,555 --> 00:12:44,382
opportunity.
This leads us then, naturally from that

185
00:12:44,382 --> 00:12:49,379
simple Aloha mechanism to the very widely
used CSMA/CD protocol.

186
00:12:49,379 --> 00:12:54,147
And this is how it works.
So, this is what was used for the original

187
00:12:54,147 --> 00:12:59,342
ten megabit per second Ethernet.
So, all hosts can transmit and receive on

188
00:12:59,342 --> 00:13:02,402
the one channel, which is this  wire
right here.

189
00:13:02,402 --> 00:13:06,956
This is the shared medium.
Packets are a variable size of course.

190
00:13:06,956 --> 00:13:12,080
When a host has a packet to transmit,
first of all it does carrier sense.

191
00:13:12,080 --> 00:13:16,750
So, that's the CS of CSMA/CD.
It checks that, that the line is quiet

192
00:13:16,750 --> 00:13:19,156
before transmitting.
So, it listens.

193
00:13:19,156 --> 00:13:24,110
If the wire is quiet, then it says,
probably my packet will get through.

194
00:13:24,110 --> 00:13:28,562
Then, if there is a collision, it will try
and detect it quickly.

195
00:13:28,562 --> 00:13:32,026
It will detect the collision as soon as
possible.

196
00:13:32,026 --> 00:13:37,751
If a collision is detected, it will stop
transmitting, wait a random time, and then

197
00:13:37,751 --> 00:13:41,954
it'll go back to one again.
In other words, it will go back, listen

198
00:13:41,954 --> 00:13:46,182
for whether the wire is, is quiet.
And then, try to transmit, and if there's

199
00:13:46,182 --> 00:13:50,651
a collision it will keep doing that.
And it will keep doing that until it's

200
00:13:50,651 --> 00:13:53,490
successful.
This random time is called a binary

201
00:13:53,490 --> 00:13:57,053
exponential backoff.
And all that means is, as the number of

202
00:13:57,053 --> 00:14:01,039
collisions increase for a given packet, it
will wait a longer time.

203
00:14:01,039 --> 00:14:05,152
In other words, if there is,
If there are lots of collisions, it means

204
00:14:05,152 --> 00:14:09,813
there's lots of other transmitters.
And therefore, I should try and hold off a

205
00:14:09,813 --> 00:14:14,777
longer amount of time, in order to be able
to give everybody the opportunity to, to

206
00:14:14,777 --> 00:14:19,718
send.
Let's look at how CSMA/CD works in

207
00:14:19,718 --> 00:14:25,780
practice.
Let's say, that I have a packet at A that

208
00:14:25,780 --> 00:14:32,240
wants to, at, wants to go to D.
So, it has the Ethernet address of D.

209
00:14:32,240 --> 00:14:36,485
A will send the packet.
The bits, the packet will propagate down

210
00:14:36,485 --> 00:14:39,922
the wire.
So, I'm going to draw it all the way along

211
00:14:39,922 --> 00:14:44,235
the wire here with D in it as if it's
moving from left to, left to right.

212
00:14:44,235 --> 00:14:47,874
It will propagate at the speed of light,
down the wire.

213
00:14:47,874 --> 00:14:52,592
And then, it will come up into D, D will
recognize the Ethernet address.

214
00:14:52,592 --> 00:14:55,490
And, the packet will be correctly
delivered.

215
00:14:56,600 --> 00:15:02,469
That first bit, that very first bit of the
front of the packet will start out by

216
00:15:02,469 --> 00:15:07,679
being put under the wire here.
And then, it will propragate along and it

217
00:15:07,679 --> 00:15:12,375
will take it L over C.
If L is the length of the cable from A to

218
00:15:12,375 --> 00:15:15,310
D.
It'll take L over C seconds to arrive.

219
00:15:15,310 --> 00:15:20,615
D listens, hears the packet, and, and in
the meantime while that packet is coming

220
00:15:20,615 --> 00:15:25,596
in, that, the, the wire is busy, so B, C,
and D will all hear the wire as busy and

221
00:15:25,596 --> 00:15:29,931
won't try and send packets.
So, if they've got anything to send, they

222
00:15:29,931 --> 00:15:33,490
will say, they'll do the carrier sends,
the step one. Say,

223
00:15:33,490 --> 00:15:37,890
The network is busy.
I won't try and send now, I'll wait

224
00:15:37,890 --> 00:15:42,008
until later.
Now, let's look at, at the condition of,

225
00:15:42,008 --> 00:15:49,273
of what causes a collision in the network.
So, if A again, has a packet destined for

226
00:15:49,273 --> 00:15:56,972
D, and D has a packet that is destined for
A, A will send its packet.

227
00:15:56,972 --> 00:16:01,646
So, let's look at the first bit.
I'm just now going to talk in terms of the

228
00:16:01,646 --> 00:16:04,762
first bit propagating down the wire from A
to D.

229
00:16:04,762 --> 00:16:11,320
It'll take L over C seconds.
If that packet is going down the wire,

230
00:16:11,320 --> 00:16:15,237
Here is the whole packet.
And D listens and says, aha, it's quiet

231
00:16:15,237 --> 00:16:20,025
right now, because the first bit hasn't
arrived, and starts sending its packet.

232
00:16:20,025 --> 00:16:24,814
And so, its packet is heading down this
direction, its first bit is going down

233
00:16:24,814 --> 00:16:27,550
here.
And so, at some point, that, the front of

234
00:16:27,550 --> 00:16:32,524
this packet will collide with the front of
this packet. And after that, they will

235
00:16:32,524 --> 00:16:37,250
pass through each other, corrupting each
other, so that everyone that sees it,

236
00:16:37,250 --> 00:16:42,350
first of all, C will see it, in this case,
so it will hear that there is a collision.

237
00:16:42,350 --> 00:16:46,833
And the way that it detects the collision
is through a number of mechanisms.

238
00:16:46,833 --> 00:16:49,723
One is it, it just starts to get garbled
messages.

239
00:16:49,723 --> 00:16:54,206
It sees a very, a much larger number of
transitions, basically twice as many

240
00:16:54,206 --> 00:16:57,687
transitions on the wire,
Or the main frequency component is

241
00:16:57,687 --> 00:17:00,518
doubled,
Or the voltage level has been increased.

242
00:17:00,518 --> 00:17:03,940
Any of these mechanisms can be used to
detect a collision.

243
00:17:03,940 --> 00:17:09,613
As the, as the packet from D continues to
head towards A, that collision will soon

244
00:17:09,613 --> 00:17:13,325
be noted at B when the front of the packet
gets to B.

245
00:17:13,325 --> 00:17:19,069
And so, it will hear the collision.
And eventually, that packet will reach A,

246
00:17:19,069 --> 00:17:24,602
and it will hear the collision.
And, of course, this packet hear will hit

247
00:17:24,602 --> 00:17:29,926
D, and so it will hear the collision.
So, at all slightly different times, they

248
00:17:29,926 --> 00:17:35,389
all hear the collision depending on the
particular time that the packets were

249
00:17:35,389 --> 00:17:35,945
sent.

250
00:17:35,945 --> 00:17:39,445
So, Carrier sense.
Listen, see whether the line is quiet,

251
00:17:39,445 --> 00:17:43,218
send the packet, listen for the collision,
then back off.

252
00:17:43,218 --> 00:17:48,982
The binary exponential back off is set so
that there's a good chance that they will

253
00:17:48,982 --> 00:17:54,540
both back off by different amounts, and
therefore not collide next time they send.

254
00:17:55,000 --> 00:17:59,494
CSMA/CD networks have a minimum
packet size requirement.

255
00:17:59,494 --> 00:18:04,432
Let me explain why that is.
Going back to my example of when A and D

256
00:18:04,432 --> 00:18:09,737
were sending packets to each other,
imagine now that A and D are sending

257
00:18:09,737 --> 00:18:14,380
packets on this network, of length L, and
speed of propagation C.

258
00:18:16,320 --> 00:18:21,402
Imagine that the, the first bit of the
packet from A,

259
00:18:21,402 --> 00:18:25,703
So remember we have packet from 
A to D.

260
00:18:25,703 --> 00:18:31,373
And we have packets from D to A.
D listens, here the, hears that the wire

261
00:18:31,373 --> 00:18:37,531
is quiet and at time zero.
So, this is going to be T equals zero.

262
00:18:37,531 --> 00:18:44,960
The first bit of A, from A is going to
start propagating down here towards D.

263
00:18:44,960 --> 00:18:51,059
Now, imagine that at A time, just a tiny,
tiny little bit, L/C - delta,

264
00:18:51,059 --> 00:18:57,560
just a tiny time period before that first
bit reaches D. Host D decides that it's

265
00:18:57,560 --> 00:19:02,456
going to send its packet.
It listens to the wire, says that it's

266
00:19:02,456 --> 00:19:05,988
idle, and then starts to transmit its
packet.

267
00:19:05,988 --> 00:19:09,680
So the, the packet almost immediately
collides.

268
00:19:09,680 --> 00:19:17,509
And at time delta later,
The collision will be detected at D, and D

269
00:19:17,509 --> 00:19:20,957
will stop transmitting
almost immediately.

270
00:19:20,957 --> 00:19:26,253
Now, although D knows about the collision,
A doesn't know about the collision yet

271
00:19:26,253 --> 00:19:31,218
because that information or that, that
collision has not propagated to A.

272
00:19:31,218 --> 00:19:36,117
So that little fragment of what of D has
sent will propagate down here.

273
00:19:36,117 --> 00:19:38,898
So, this is the collision propagating
down.

274
00:19:38,898 --> 00:19:43,664
And so, eventually, the propagation, the,
the, the first bit will reach here.

275
00:19:43,664 --> 00:19:46,511
If A is still sending the packet towards
D,

276
00:19:46,511 --> 00:19:51,873
In other words, if it hasn't reached the
end of the packet yet, then A will detect

277
00:19:51,873 --> 00:19:56,126
the collision as well.
And it will detect that collision after

278
00:19:56,126 --> 00:20:01,052
L/C from when it started, and then
another L/C until the packet is

279
00:20:01,052 --> 00:20:04,381
finished.
So, there's two L/C in, in the worse

280
00:20:04,381 --> 00:20:09,374
case is the time from when A starts
sending a packet until it hears of the

281
00:20:09,374 --> 00:20:15,788
collision.
If A had finished sending its packet by

282
00:20:15,788 --> 00:20:20,682
the time the collision propagated to it,
A, wouldn't realize that the collision

283
00:20:20,682 --> 00:20:23,946
took place.
And when it hears about the collision, it

284
00:20:23,946 --> 00:20:27,209
wouldn't know what packet that caused the
collision.

285
00:20:27,209 --> 00:20:31,351
Had it been its own packet, had it been a
packet from another host.

286
00:20:31,351 --> 00:20:36,622
So, in order for a simple way for A to be
sure that it stops and realizes that there

287
00:20:36,622 --> 00:20:40,701
was a collision and needs to back off and
re-transmit the packet,

288
00:20:40,701 --> 00:20:45,595
One, one simple way to do this is to make
sure that A is sending its packet for at

289
00:20:45,595 --> 00:20:48,789
least 2L over C.
In other words, in the worst case, it's

290
00:20:48,789 --> 00:20:53,340
guaranteed to hear about the collision
before it stops transmitting the packet.

291
00:20:53,340 --> 00:20:59,775
This means that we have a requirement of 
P/R, the packet length divided by the

292
00:20:59,775 --> 00:21:03,109
rate is greater than or equal to 
2L over C.

293
00:21:03,109 --> 00:21:09,466
This is a general requirement for CSMA/CD
networks in order to be able to detect a

294
00:21:09,466 --> 00:21:13,266
collision while it's still transmitting a
packet.

295
00:21:13,266 --> 00:21:18,073
Let's look at an example.
Imagine that I have a CSMA/CD network

296
00:21:18,073 --> 00:21:22,260
which is running at a rate of ten megabits
per second.

297
00:21:22,260 --> 00:21:26,995
And, let's say it's 10,000 meters long,
ten kilometers long.

298
00:21:26,995 --> 00:21:32,466
It's a pretty big network.
And that the speed of propagation is two

299
00:21:32,466 --> 00:21:39,161
times ten to the eight meters per second.
What we need, P over R is greater than or

300
00:21:39,161 --> 00:21:43,978
equal to 2L over C.
So, we can say P must be greater than or

301
00:21:43,978 --> 00:21:48,820
equal to two times L, ten to the four,
Times,

302
00:21:48,820 --> 00:21:53,752
Well, I've just moved the, the R over onto
the other side.

303
00:21:53,752 --> 00:21:58,366
So, ten to the seven, divided by two times
ten to the eight.

304
00:21:58,366 --> 00:22:04,014
So, the two's are going to cancel, and I've
got eleven over eight is 1,000 bits.

305
00:22:04,014 --> 00:22:09,980
So, what would tell me is that for a
CSMA/CD network to operate correctly at

306
00:22:09,980 --> 00:22:16,424
that size and those rates, the minimum
size packet has to be a 1000 bits or about

307
00:22:16,424 --> 00:22:19,887
128 bytes.
So, in summary, we've seen how medium

308
00:22:19,887 --> 00:22:24,110
access control protocols are used starting
with Aloha,

309
00:22:24,110 --> 00:22:29,815
A nice simple random access protocol.
And then, improved on its performance to

310
00:22:29,815 --> 00:22:33,890
create CSMA/CD.
And, we saw that CSMA/CD is very simple,

311
00:22:33,890 --> 00:22:38,639
Nice random access mechanism.
And, we learned that the minimum packet

312
00:22:38,639 --> 00:22:44,156
size, P over R has to be greater than 2L
over C in order to be able to reliably

313
00:22:44,156 --> 00:22:48,137
detect collisions before we finish
transmitting a packet.

314
00:22:48,137 --> 00:22:53,165
In the next video, I'm going to be
explaining how CSMA/CD was used in the

315
00:22:53,165 --> 00:22:57,146
original Ethernet.
And then, how Ethernet has evolved over

316
00:22:57,146 --> 00:23:00,080
time.
And then, end with Ethernet switching.

